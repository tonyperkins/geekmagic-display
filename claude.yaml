esphome:
  name: geekmagic-clock
  friendly_name: GeekMagic Clock
  on_boot:
    then:
      - delay: 1s
      - light.turn_on:
          id: back_light
          brightness: 70%
      - component.update: lcd_display

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "YgdW+qnE244n/+i4SyozBLNo9+DMI9SYHuFPPoswuwg="

ota:
  - platform: esphome
    password: "29f09ea72005368b01eb1231bdc562f2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Geekmagic-Clock Fallback Hotspot"
    password: "uewvtkFigvsI"

captive_portal:

http_request:
  verify_ssl: false
  # Not using HTTPS here, so verify_ssl is not needed; keep defaults.
  # Add options here if you switch to https (e.g., verify_ssl: false)

# Backlight control
output:
  - platform: ledc
    pin: GPIO25
    inverted: true
    id: backlight_pwm

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

# Touch sensor setup
esp32_touch:

binary_sensor:
  - platform: esp32_touch
    name: "Touch Button"
    pin: GPIO32
    threshold: 1250

# SPI configuration for your actual hardware
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23  # Your hardware uses GPIO23, not GPIO19
  id: spihwd

# Download a doorbell snapshot via Home Assistant's camera proxy
online_image:
  - url: "http://192.168.50.84:8123/api/camera_proxy/camera.front_door_esphome"
    id: doorbell_img
    format: jpeg
    type: GRAYSCALE           # lower RAM than RGB565
    resize: 150x150           # keep <= 150x150 so decoded buffer fits heap
    buffer_size: 16384        # smaller download buffer for stability
    request_headers:
      Authorization: !secret ha_bearer
      Accept: "image/jpeg"
    update_interval: 5s       # fetch a new frame every few seconds
    on_download_finished:
      then:
        - component.update: lcd_display

# Display configuration for your actual display
display:
  - platform: ili9xxx
    model: st7789v
    spi_id: spihwd
    data_rate: 20MHz
    dc_pin: GPIO02
    reset_pin: GPIO04
    spi_mode: MODE3
    dimensions:
      width: 240      # Display is 240x240
      height: 240
      offset_height: 0
      offset_width: 0
    invert_colors: true
    color_order: bgr
    color_palette: 8BIT
    auto_clear_enabled: true
    update_interval: never
    id: lcd_display
    lambda: |-
      // Snapshot background + watchface overlay
      it.fill(Color::BLACK);
      // Draw latest snapshot centered (150x150) once available
      it.image(45, 45, id(doorbell_img));
      auto now = id(homeassistant_time).now();
      if (now.is_valid()) {
        // Time (with slight shadow for readability over image)
        it.strftime(121, 91, id(time_font), Color(0, 0, 0), TextAlign::CENTER, "%H:%M", now);
        it.strftime(120, 90, id(time_font), Color::WHITE, TextAlign::CENTER, "%H:%M", now);
        // Date
        it.strftime(121, 141, id(roboto_font), Color(0, 0, 0), TextAlign::CENTER, "%a, %b %d", now);
        it.strftime(120, 140, id(roboto_font), Color(230, 230, 230), TextAlign::CENTER, "%a, %b %d", now);
      } else {
        it.printf(120, 120, id(roboto_font), Color::WHITE, TextAlign::CENTER, "Waiting for time...");
      }
      // Optional message
      if (id(display_message).has_state() && !id(display_message).state.empty()) {
        it.printf(121, 201, id(small_font), Color(0, 0, 0), TextAlign::CENTER, "%s", id(display_message).state.c_str());
        it.printf(120, 200, id(small_font), Color::WHITE, TextAlign::CENTER, "%s", id(display_message).state.c_str());
      }

# Fonts
font:
  - file: "gfonts://Roboto"
    id: roboto_font
    size: 18
  - file: "gfonts://Roboto"
    id: small_font
    size: 14
  - file: "gfonts://Roboto@700"
    id: time_font
    size: 48

# Time component
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Chicago
    on_time_sync:
      then:
        - component.update: lcd_display
    on_time:
      - seconds: 0
        then:
          - component.update: lcd_display

# Text sensor to receive messages from Home Assistant
text_sensor:
  - platform: homeassistant
    name: "Display Message"
    id: display_message
    entity_id: input_text.geekmagic_display_message
    on_value:
      then:
        - component.update: lcd_display