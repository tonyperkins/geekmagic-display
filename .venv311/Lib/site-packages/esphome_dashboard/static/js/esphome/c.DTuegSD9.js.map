{"version":3,"file":"c.DTuegSD9.js","sources":["../../../../src/web-serial/flash.ts"],"sourcesContent":["import { ESPLoader } from \"esptool-js\";\nimport { getFactoryDownloadUrl } from \"../api/download\";\n\nexport interface FileToFlash {\n  data: string;\n  address: number;\n}\n\nexport const getConfigurationFiles = async (\n  filename: string,\n): Promise<FileToFlash[]> => {\n  let resp: Response;\n  try {\n    resp = await fetch(getFactoryDownloadUrl(filename));\n  } catch (err) {\n    throw new Error(`Downloading firmware failed: ${err}`);\n  }\n\n  if (!resp.ok) {\n    throw new Error(`Downloading firmware failed: ${resp.status}`);\n  }\n\n  const reader = new FileReader();\n  const blob = await resp.blob();\n\n  const data = await new Promise<string>((resolve) => {\n    reader.addEventListener(\"load\", () => resolve(reader.result as string));\n    reader.readAsBinaryString(blob);\n  });\n\n  return [\n    {\n      data,\n      address: 0,\n    },\n  ];\n};\n\nexport const flashFiles = async (\n  esploader: ESPLoader,\n  fileArray: FileToFlash[],\n  erase: boolean,\n  writeProgress: (pct: number) => void,\n) => {\n  if (erase) {\n    await esploader.eraseFlash();\n  }\n\n  let totalSize = 0;\n  for (const file of fileArray) {\n    totalSize += file.data.length;\n  }\n  let totalWritten = 0;\n  writeProgress(0);\n\n  await esploader.writeFlash({\n    fileArray,\n    flashSize: \"keep\",\n    flashMode: \"keep\",\n    flashFreq: \"keep\",\n    eraseAll: false,\n    compress: true,\n    // report progress\n    reportProgress: (fileIndex: number, written: number, total: number) => {\n      const uncompressedWritten =\n        (written / total) * fileArray[fileIndex].data.length;\n\n      const newPct = Math.floor(\n        ((totalWritten + uncompressedWritten) / totalSize) * 100,\n      );\n\n      // we're done with this file\n      if (written === total) {\n        totalWritten += uncompressedWritten;\n        return;\n      }\n\n      writeProgress(newPct);\n    },\n  });\n\n  writeProgress(100);\n};\n"],"names":["getConfigurationFiles","async","filename","resp","fetch","getFactoryDownloadUrl","err","Error","ok","status","reader","FileReader","blob","data","Promise","resolve","addEventListener","result","readAsBinaryString","address","flashFiles","esploader","fileArray","erase","writeProgress","eraseFlash","totalSize","file","length","totalWritten","writeFlash","flashSize","flashMode","flashFreq","eraseAll","compress","reportProgress","fileIndex","written","total","uncompressedWritten","newPct","Math","floor"],"mappings":"8CAQaA,EAAwBC,MACnCC,IAEA,IAAIC,EACJ,IACEA,QAAaC,MAAMC,EAAsBH,IACzC,MAAOI,GACP,MAAM,IAAIC,MAAM,gCAAgCD,KAGlD,IAAKH,EAAKK,GACR,MAAM,IAAID,MAAM,gCAAgCJ,EAAKM,UAGvD,MAAMC,EAAS,IAAIC,WACbC,QAAaT,EAAKS,OAOxB,MAAO,CACL,CACEC,WAPe,IAAIC,SAAiBC,IACtCL,EAAOM,iBAAiB,QAAQ,IAAMD,EAAQL,EAAOO,UACrDP,EAAOQ,mBAAmBN,EAAK,IAM7BO,QAAS,GAEZ,EAGUC,EAAanB,MACxBoB,EACAC,EACAC,EACAC,KAEID,SACIF,EAAUI,aAGlB,IAAIC,EAAY,EAChB,IAAK,MAAMC,KAAQL,EACjBI,GAAaC,EAAKd,KAAKe,OAEzB,IAAIC,EAAe,EACnBL,EAAc,SAERH,EAAUS,WAAW,CACzBR,YACAS,UAAW,OACXC,UAAW,OACXC,UAAW,OACXC,UAAU,EACVC,UAAU,EAEVC,eAAgB,CAACC,EAAmBC,EAAiBC,KACnD,MAAMC,EACHF,EAAUC,EAASjB,EAAUe,GAAWxB,KAAKe,OAE1Ca,EAASC,KAAKC,OAChBd,EAAeW,GAAuBd,EAAa,KAInDY,IAAYC,EAKhBf,EAAciB,GAJZZ,GAAgBW,CAIG,IAIzBhB,EAAc,IAAI"}