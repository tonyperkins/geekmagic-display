{"version":3,"file":"c.B9uCRr4V.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32c3.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nexport class ESP32C3ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C3\";\n        this.IMAGE_CHIP_ID = 5;\n        this.EFUSE_BASE = 0x60008800;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x6000007c;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x60002000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n    }\n    async getPkgVersion(loader) {\n        const numWord = 3;\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const addr = block1Addr + 4 * numWord;\n        const word3 = await loader.readReg(addr);\n        const pkgVersion = (word3 >> 21) & 0x07;\n        return pkgVersion;\n    }\n    async getChipRevision(loader) {\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const numWord = 3;\n        const pos = 18;\n        const addr = block1Addr + 4 * numWord;\n        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;\n        return ret;\n    }\n    async getChipDescription(loader) {\n        let desc;\n        const pkgVer = await this.getPkgVersion(loader);\n        if (pkgVer === 0) {\n            desc = \"ESP32-C3\";\n        }\n        else {\n            desc = \"unknown ESP32-C3\";\n        }\n        const chip_rev = await this.getChipRevision(loader);\n        desc += \" (revision \" + chip_rev + \")\";\n        return desc;\n    }\n    async getFlashCap(loader) {\n        const numWord = 3;\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const addr = block1Addr + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        const flashCap = (registerValue >> 27) & 0x07;\n        return flashCap;\n    }\n    async getFlashVendor(loader) {\n        const numWord = 4;\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const addr = block1Addr + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        const vendorId = (registerValue >> 0) & 0x07;\n        const vendorMap = {\n            1: \"XMC\",\n            2: \"GD\",\n            3: \"FM\",\n            4: \"TT\",\n            5: \"ZBIT\",\n        };\n        return vendorMap[vendorId] || \"\";\n    }\n    async getChipFeatures(loader) {\n        const features = [\"Wi-Fi\", \"BLE\"];\n        const flashMap = {\n            0: null,\n            1: \"Embedded Flash 4MB\",\n            2: \"Embedded Flash 2MB\",\n            3: \"Embedded Flash 1MB\",\n            4: \"Embedded Flash 8MB\",\n        };\n        const flashCap = await this.getFlashCap(loader);\n        const flashVendor = await this.getFlashVendor(loader);\n        const flash = flashMap[flashCap];\n        const flashDescription = flash !== undefined ? flash : \"Unknown Embedded Flash\";\n        if (flash !== null) {\n            features.push(`${flashDescription} (${flashVendor})`);\n        }\n        return features;\n    }\n    async getCrystalFreq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32C3ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","MAC_EFUSE_REG","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","getPkgVersion","loader","addr","readReg","getChipRevision","getChipDescription","desc","getFlashCap","getFlashVendor","getChipFeatures","features","flashCap","flashVendor","flash","flashDescription","undefined","push","getCrystalFreq","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","getEraseSize","offset","size"],"mappings":"oCACO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,WACjBD,KAAKE,cAAgB,EACrBF,KAAKG,WAAa,WAClBH,KAAKI,cAAgBJ,KAAKG,WAAa,GACvCH,KAAKK,gBAAkB,WACvBL,KAAKM,iBAAmB,QACxBN,KAAKO,mBAAqB,WAC1BP,KAAKQ,iBAAmB,KACxBR,KAAKS,wBAA0B,EAC/BT,KAAKU,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZV,KAAKW,aAAe,WACpBX,KAAKY,aAAe,GACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,mBAAqB,GAC1Bf,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,YAAc,EAC3B,CACI,mBAAMC,CAAcC,GAChB,MAEMC,EADapB,KAAKG,WAAa,GACX,GAG1B,aAFoBgB,EAAOE,QAAQD,IACN,GAAM,CAE3C,CACI,qBAAME,CAAgBH,GAClB,MAGMC,EAHapB,KAAKG,WAAa,GAGX,GAE1B,aADoBgB,EAAOE,QAAQD,GAAU,GAFjC,OAIpB,CACI,wBAAMG,CAAmBJ,GACrB,IAAIK,EAGAA,EADW,UADMxB,KAAKkB,cAAcC,GAE7B,WAGA,mBAIX,OADAK,GAAQ,oBADexB,KAAKsB,gBAAgBH,GACT,IAC5BK,CACf,CACI,iBAAMC,CAAYN,GACd,MAEMC,EADapB,KAAKG,WAAa,GACX,GAG1B,aAF4BgB,EAAOE,QAAQD,IACR,GAAM,CAEjD,CACI,oBAAMM,CAAeP,GACjB,MAEMC,EADapB,KAAKG,WAAa,GACX,GAU1B,MAPkB,CACd,EAAG,MACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,cAPqBgB,EAAOE,QAAQD,IACR,EAAK,IAQV,EACtC,CACI,qBAAMO,CAAgBR,GAClB,MAAMS,EAAW,CAAC,QAAS,OAQrBC,QAAiB7B,KAAKyB,YAAYN,GAClCW,QAAoB9B,KAAK0B,eAAeP,GACxCY,EATW,CACb,EAAG,KACH,EAAG,qBACH,EAAG,qBACH,EAAG,qBACH,EAAG,sBAIgBF,GACjBG,OAA6BC,IAAVF,EAAsBA,EAAQ,yBAIvD,OAHc,OAAVA,GACAH,EAASM,KAAK,GAAGF,MAAqBF,MAEnCF,CACf,CACI,oBAAMO,CAAehB,GACjB,OAAO,EACf,CACI,IAAAiB,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CAC1C,CACI,aAAMG,CAAQtB,GACV,IAAIuB,QAAavB,EAAOE,QAAQrB,KAAKI,eACrCsC,KAAgB,EAChB,IAAIC,QAAaxB,EAAOE,QAAQrB,KAAKI,cAAgB,GACrDuC,EAAQA,IAAS,EAAK,MACtB,MAAMC,EAAM,IAAIC,WAAW,GAO3B,OANAD,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACD1C,KAAKoC,KAAKQ,EAAI,IAClB,IACA5C,KAAKoC,KAAKQ,EAAI,IACd,IACA5C,KAAKoC,KAAKQ,EAAI,IACd,IACA5C,KAAKoC,KAAKQ,EAAI,IACd,IACA5C,KAAKoC,KAAKQ,EAAI,IACd,IACA5C,KAAKoC,KAAKQ,EAAI,GAC1B,CACI,YAAAE,CAAaC,EAAQC,GACjB,OAAOA,CACf","x_google_ignoreList":[0]}