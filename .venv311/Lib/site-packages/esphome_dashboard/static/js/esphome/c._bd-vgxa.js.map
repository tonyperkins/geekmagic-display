{"version":3,"file":"c._bd-vgxa.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32c5.js"],"sourcesContent":["import { ESP32C6ROM } from \"./esp32c6\";\nexport class ESP32C5ROM extends ESP32C6ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C5\";\n        this.IMAGE_CHIP_ID = 23;\n        this.EFUSE_BASE = 0x600b4800;\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.UART_CLKDIV_REG = 0x60000014;\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n        this.IROM_MAP_START = 0x42000000;\n        this.IROM_MAP_END = 0x42800000;\n        this.DROM_MAP_START = 0x42800000;\n        this.DROM_MAP_END = 0x43000000;\n        this.PCR_SYSCLK_CONF_REG = 0x60096110;\n        this.PCR_SYSCLK_XTAL_FREQ_V = 0x7f << 24;\n        this.PCR_SYSCLK_XTAL_FREQ_S = 24;\n        this.XTAL_CLK_DIVIDER = 1;\n        this.UARTDEV_BUF_NO = 0x4085f51c; // Variable in ROM .bss which indicates the port in use\n        // Magic value for ESP32C5\n        this.CHIP_DETECT_MAGIC_VALUE = [0x1101406f];\n        this.FLASH_FREQUENCY = {\n            \"80m\": 0xf,\n            \"40m\": 0x0,\n            \"20m\": 0x2,\n        };\n        this.MEMORY_MAP = [\n            [0x00000000, 0x00010000, \"PADDING\"],\n            [0x42800000, 0x43000000, \"DROM\"],\n            [0x40800000, 0x40860000, \"DRAM\"],\n            [0x40800000, 0x40860000, \"BYTE_ACCESSIBLE\"],\n            [0x4003a000, 0x40040000, \"DROM_MASK\"],\n            [0x40000000, 0x4003a000, \"IROM_MASK\"],\n            [0x42000000, 0x42800000, \"IROM\"],\n            [0x40800000, 0x40860000, \"IRAM\"],\n            [0x50000000, 0x50004000, \"RTC_IRAM\"],\n            [0x50000000, 0x50004000, \"RTC_DRAM\"],\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\n        ];\n        this.UF2_FAMILY_ID = 0xf71c0343;\n        this.EFUSE_MAX_KEY = 5;\n        this.KEY_PURPOSES = {\n            0: \"USER/EMPTY\",\n            1: \"ECDSA_KEY\",\n            2: \"XTS_AES_256_KEY_1\",\n            3: \"XTS_AES_256_KEY_2\",\n            4: \"XTS_AES_128_KEY\",\n            5: \"HMAC_DOWN_ALL\",\n            6: \"HMAC_DOWN_JTAG\",\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n            8: \"HMAC_UP\",\n            9: \"SECURE_BOOT_DIGEST0\",\n            10: \"SECURE_BOOT_DIGEST1\",\n            11: \"SECURE_BOOT_DIGEST2\",\n            12: \"KM_INIT_KEY\",\n        };\n    }\n    async getPkgVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 26) & 0x07;\n    }\n    async getMinorChipVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 0) & 0x0f;\n    }\n    async getMajorChipVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 4) & 0x03;\n    }\n    async getChipDescription(loader) {\n        const pkgVer = await this.getPkgVersion(loader);\n        let desc;\n        if (pkgVer === 0) {\n            desc = \"ESP32-C5\";\n        }\n        else {\n            desc = \"unknown ESP32-C5\";\n        }\n        const majorRev = await this.getMajorChipVersion(loader);\n        const minorRev = await this.getMinorChipVersion(loader);\n        return `${desc} (revision v${majorRev}.${minorRev})`;\n    }\n    async getCrystalFreq(loader) {\n        // The crystal detection algorithm of ESP32/ESP8266\n        // works for ESP32-C5 as well.\n        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let normXtal;\n        if (etsXtal > 45) {\n            normXtal = 48;\n        }\n        else if (etsXtal > 33) {\n            normXtal = 40;\n        }\n        else {\n            normXtal = 26;\n        }\n        if (Math.abs(normXtal - etsXtal) > 1) {\n            loader.info(\"WARNING: Unsupported crystal in use\");\n        }\n        return normXtal;\n    }\n    async getCrystalFreqRomExpect(loader) {\n        return (((await loader.readReg(this.PCR_SYSCLK_CONF_REG)) & this.PCR_SYSCLK_XTAL_FREQ_V) >> this.PCR_SYSCLK_XTAL_FREQ_S);\n    }\n}\n"],"names":["ESP32C5ROM","ESP32C6ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","EFUSE_BLOCK1_ADDR","MAC_EFUSE_REG","UART_CLKDIV_REG","EFUSE_RD_REG_BASE","EFUSE_PURPOSE_KEY0_REG","EFUSE_PURPOSE_KEY0_SHIFT","EFUSE_PURPOSE_KEY1_REG","EFUSE_PURPOSE_KEY1_SHIFT","EFUSE_PURPOSE_KEY2_REG","EFUSE_PURPOSE_KEY2_SHIFT","EFUSE_PURPOSE_KEY3_REG","EFUSE_PURPOSE_KEY3_SHIFT","EFUSE_PURPOSE_KEY4_REG","EFUSE_PURPOSE_KEY4_SHIFT","EFUSE_PURPOSE_KEY5_REG","EFUSE_PURPOSE_KEY5_SHIFT","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT","EFUSE_SPI_BOOT_CRYPT_CNT_REG","EFUSE_SPI_BOOT_CRYPT_CNT_MASK","EFUSE_SECURE_BOOT_EN_REG","EFUSE_SECURE_BOOT_EN_MASK","IROM_MAP_START","IROM_MAP_END","DROM_MAP_START","DROM_MAP_END","PCR_SYSCLK_CONF_REG","PCR_SYSCLK_XTAL_FREQ_V","PCR_SYSCLK_XTAL_FREQ_S","XTAL_CLK_DIVIDER","UARTDEV_BUF_NO","CHIP_DETECT_MAGIC_VALUE","FLASH_FREQUENCY","MEMORY_MAP","UF2_FAMILY_ID","EFUSE_MAX_KEY","KEY_PURPOSES","getPkgVersion","loader","readReg","getMinorChipVersion","getMajorChipVersion","getChipDescription","desc","getCrystalFreq","uartDiv","UART_CLKDIV_MASK","etsXtal","transport","baudrate","normXtal","Math","abs","info","getCrystalFreqRomExpect"],"mappings":"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","x_google_ignoreList":[0]}