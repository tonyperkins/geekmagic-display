{"version":3,"file":"c.D2h8fT7H.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32s2.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nexport class ESP32S2ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-S2\";\n        this.IMAGE_CHIP_ID = 2;\n        this.IROM_MAP_START = 0x40080000;\n        this.IROM_MAP_END = 0x40b80000;\n        this.DROM_MAP_START = 0x3f000000;\n        this.DROM_MAP_END = 0x3f3f0000;\n        this.CHIP_DETECT_MAGIC_VALUE = [0x000007c6];\n        this.SPI_REG_BASE = 0x3f402000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n        this.SPI_ADDR_REG_MSB = false;\n        this.MAC_EFUSE_REG = 0x3f41a044; // ESP32-S2 has special block for MAC efuses\n        this.UART_CLKDIV_REG = 0x3f400014;\n        this.SUPPORTS_ENCRYPTED_FLASH = true;\n        this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\n        // todo: use espefuse APIs to get this info\n        this.EFUSE_BASE = 0x3f41a000;\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n        this.EFUSE_BLOCK2_ADDR = this.EFUSE_BASE + 0x05c;\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 19;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n        this.EFUSE_RD_REPEAT_DATA3_REG = this.EFUSE_BASE + 0x3c;\n        this.EFUSE_RD_REPEAT_DATA3_REG_FLASH_TYPE_MASK = 1 << 9;\n        this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\n        this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\n        this.PURPOSE_VAL_XTS_AES128_KEY = 4;\n        this.UARTDEV_BUF_NO = 0x3ffffd14; // Variable in ROM .bss which indicates the port in use\n        this.UARTDEV_BUF_NO_USB_OTG = 2; // Value of the above indicating that USB-OTG is in use\n        this.USB_RAM_BLOCK = 0x800; // Max block size USB-OTG is used\n        this.GPIO_STRAP_REG = 0x3f404038;\n        this.GPIO_STRAP_SPI_BOOT_MASK = 1 << 3; // Not download mode\n        this.GPIO_STRAP_VDDSPI_MASK = 1 << 4;\n        this.RTC_CNTL_OPTION1_REG = 0x3f408128;\n        this.RTC_CNTL_FORCE_DOWNLOAD_BOOT_MASK = 0x1; // Is download mode forced over USB?\n        this.RTCCNTL_BASE_REG = 0x3f408000;\n        this.RTC_CNTL_WDTCONFIG0_REG = this.RTCCNTL_BASE_REG + 0x0094;\n        this.RTC_CNTL_WDTCONFIG1_REG = this.RTCCNTL_BASE_REG + 0x0098;\n        this.RTC_CNTL_WDTWPROTECT_REG = this.RTCCNTL_BASE_REG + 0x00ac;\n        this.RTC_CNTL_WDT_WKEY = 0x50d83aa1;\n        this.MEMORY_MAP = [\n            [0x00000000, 0x00010000, \"PADDING\"],\n            [0x3f000000, 0x3ff80000, \"DROM\"],\n            [0x3f500000, 0x3ff80000, \"EXTRAM_DATA\"],\n            [0x3ff9e000, 0x3ffa0000, \"RTC_DRAM\"],\n            [0x3ff9e000, 0x40000000, \"BYTE_ACCESSIBLE\"],\n            [0x3ff9e000, 0x40072000, \"MEM_INTERNAL\"],\n            [0x3ffb0000, 0x40000000, \"DRAM\"],\n            [0x40000000, 0x4001a100, \"IROM_MASK\"],\n            [0x40020000, 0x40070000, \"IRAM\"],\n            [0x40070000, 0x40072000, \"RTC_IRAM\"],\n            [0x40080000, 0x40800000, \"IROM\"],\n            [0x50000000, 0x50002000, \"RTC_DATA\"],\n        ];\n        this.EFUSE_VDD_SPI_REG = this.EFUSE_BASE + 0x34;\n        this.VDD_SPI_XPD = 1 << 4;\n        this.VDD_SPI_TIEH = 1 << 5;\n        this.VDD_SPI_FORCE = 1 << 6;\n        this.UF2_FAMILY_ID = 0xbfdd4eee;\n        this.EFUSE_MAX_KEY = 5;\n        this.KEY_PURPOSES = {\n            0: \"USER/EMPTY\",\n            1: \"RESERVED\",\n            2: \"XTS_AES_256_KEY_1\",\n            3: \"XTS_AES_256_KEY_2\",\n            4: \"XTS_AES_128_KEY\",\n            5: \"HMAC_DOWN_ALL\",\n            6: \"HMAC_DOWN_JTAG\",\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n            8: \"HMAC_UP\",\n            9: \"SECURE_BOOT_DIGEST0\",\n            10: \"SECURE_BOOT_DIGEST1\",\n            11: \"SECURE_BOOT_DIGEST2\",\n        };\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x60000078;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n    }\n    async getPkgVersion(loader) {\n        const numWord = 4;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const word = await loader.readReg(addr);\n        const pkgVersion = (word >> 0) & 0x0f;\n        return pkgVersion;\n    }\n    async getMinorChipVersion(loader) {\n        const hiNumWord = 3;\n        const hi = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * hiNumWord)) >> 20) & 0x01;\n        const lowNumWord = 4;\n        const low = ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * lowNumWord)) >> 4) & 0x07;\n        return (hi << 3) + low;\n    }\n    async getMajorChipVersion(loader) {\n        const numWord = 3;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 18) & 0x03;\n    }\n    async getFlashVersion(loader) {\n        const numWord = 3;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 21) & 0x0f;\n    }\n    async getChipDescription(loader) {\n        const chipDesc = {\n            0: \"ESP32-S2\",\n            1: \"ESP32-S2FH2\",\n            2: \"ESP32-S2FH4\",\n            102: \"ESP32-S2FNR2\",\n            100: \"ESP32-S2R2\",\n        };\n        const chipIndex = (await this.getFlashCap(loader)) + (await this.getPsramCap(loader)) * 100;\n        const majorRev = await this.getMajorChipVersion(loader);\n        const minorRev = await this.getMinorChipVersion(loader);\n        return `${chipDesc[chipIndex] || \"unknown ESP32-S2\"} (revision v${majorRev}.${minorRev})`;\n    }\n    async getFlashCap(loader) {\n        return await this.getFlashVersion(loader);\n    }\n    async getPsramVersion(loader) {\n        const numWord = 3;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        const psramCap = (registerValue >> 28) & 0x0f;\n        return psramCap;\n    }\n    async getPsramCap(loader) {\n        return await this.getPsramVersion(loader);\n    }\n    async getBlock2Version(loader) {\n        const numWord = 4;\n        const addr = this.EFUSE_BLOCK2_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        const block2Ver = (registerValue >> 4) & 0x07;\n        return block2Ver;\n    }\n    async getChipFeatures(loader) {\n        const features = [\"Wi-Fi\"];\n        const flashMap = {\n            0: \"No Embedded Flash\",\n            1: \"Embedded Flash 2MB\",\n            2: \"Embedded Flash 4MB\",\n        };\n        const flashCap = await this.getFlashCap(loader);\n        const flashDescription = flashMap[flashCap] || \"Unknown Embedded Flash\";\n        features.push(flashDescription);\n        const psramMap = {\n            0: \"No Embedded Flash\",\n            1: \"Embedded PSRAM 2MB\",\n            2: \"Embedded PSRAM 4MB\",\n        };\n        const psramCap = await this.getPsramCap(loader);\n        const psramDescription = psramMap[psramCap] || \"Unknown Embedded PSRAM\";\n        features.push(psramDescription);\n        const block2VersionMap = {\n            0: \"No calibration in BLK2 of efuse\",\n            1: \"ADC and temperature sensor calibration in BLK2 of efuse V1\",\n            2: \"ADC and temperature sensor calibration in BLK2 of efuse V2\",\n        };\n        const block2Ver = await this.getBlock2Version(loader);\n        const block2VersionDescription = block2VersionMap[block2Ver] || \"Unknown Calibration in BLK2\";\n        features.push(block2VersionDescription);\n        return features;\n    }\n    async getCrystalFreq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n    async usingUsbOtg(loader) {\n        const uartNo = (await loader.readReg(this.UARTDEV_BUF_NO)) & 0xff;\n        return uartNo === this.UARTDEV_BUF_NO_USB_OTG;\n    }\n    async postConnect(loader) {\n        const usingUsbOtg = await this.usingUsbOtg(loader);\n        loader.debug(\"In _post_connect using USB OTG ?\" + usingUsbOtg);\n        if (usingUsbOtg) {\n            loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\n        }\n    }\n}\n"],"names":["ESP32S2ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","IROM_MAP_START","IROM_MAP_END","DROM_MAP_START","DROM_MAP_END","CHIP_DETECT_MAGIC_VALUE","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","SPI_ADDR_REG_MSB","MAC_EFUSE_REG","UART_CLKDIV_REG","SUPPORTS_ENCRYPTED_FLASH","FLASH_ENCRYPTED_WRITE_ALIGN","EFUSE_BASE","EFUSE_RD_REG_BASE","EFUSE_BLOCK1_ADDR","EFUSE_BLOCK2_ADDR","EFUSE_PURPOSE_KEY0_REG","EFUSE_PURPOSE_KEY0_SHIFT","EFUSE_PURPOSE_KEY1_REG","EFUSE_PURPOSE_KEY1_SHIFT","EFUSE_PURPOSE_KEY2_REG","EFUSE_PURPOSE_KEY2_SHIFT","EFUSE_PURPOSE_KEY3_REG","EFUSE_PURPOSE_KEY3_SHIFT","EFUSE_PURPOSE_KEY4_REG","EFUSE_PURPOSE_KEY4_SHIFT","EFUSE_PURPOSE_KEY5_REG","EFUSE_PURPOSE_KEY5_SHIFT","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT","EFUSE_SPI_BOOT_CRYPT_CNT_REG","EFUSE_SPI_BOOT_CRYPT_CNT_MASK","EFUSE_SECURE_BOOT_EN_REG","EFUSE_SECURE_BOOT_EN_MASK","EFUSE_RD_REPEAT_DATA3_REG","EFUSE_RD_REPEAT_DATA3_REG_FLASH_TYPE_MASK","PURPOSE_VAL_XTS_AES256_KEY_1","PURPOSE_VAL_XTS_AES256_KEY_2","PURPOSE_VAL_XTS_AES128_KEY","UARTDEV_BUF_NO","UARTDEV_BUF_NO_USB_OTG","USB_RAM_BLOCK","GPIO_STRAP_REG","GPIO_STRAP_SPI_BOOT_MASK","GPIO_STRAP_VDDSPI_MASK","RTC_CNTL_OPTION1_REG","RTC_CNTL_FORCE_DOWNLOAD_BOOT_MASK","RTCCNTL_BASE_REG","RTC_CNTL_WDTCONFIG0_REG","RTC_CNTL_WDTCONFIG1_REG","RTC_CNTL_WDTWPROTECT_REG","RTC_CNTL_WDT_WKEY","MEMORY_MAP","EFUSE_VDD_SPI_REG","VDD_SPI_XPD","VDD_SPI_TIEH","VDD_SPI_FORCE","UF2_FAMILY_ID","EFUSE_MAX_KEY","KEY_PURPOSES","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","getPkgVersion","loader","addr","readReg","getMinorChipVersion","getMajorChipVersion","getFlashVersion","getChipDescription","chipIndex","getFlashCap","getPsramCap","majorRev","minorRev","getPsramVersion","getBlock2Version","getChipFeatures","features","flashDescription","push","psramDescription","block2VersionDescription","getCrystalFreq","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","getEraseSize","offset","size","usingUsbOtg","postConnect","debug","ESP_RAM_BLOCK"],"mappings":"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","x_google_ignoreList":[0]}