{"version":3,"file":"c.By3zwmU5.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32p4.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\nexport class ESP32P4ROM extends ESP32ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-P4\";\n        this.IMAGE_CHIP_ID = 18;\n        this.IROM_MAP_START = 0x40000000;\n        this.IROM_MAP_END = 0x4c000000;\n        this.DROM_MAP_START = 0x40000000;\n        this.DROM_MAP_END = 0x4c000000;\n        this.BOOTLOADER_FLASH_OFFSET = 0x2000; // First 2 sectors are reserved for FE purposes\n        this.CHIP_DETECT_MAGIC_VALUE = [0x0, 0x0addbad0];\n        this.UART_DATE_REG_ADDR = 0x500ca000 + 0x8c;\n        this.EFUSE_BASE = 0x5012d000;\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.SPI_REG_BASE = 0x5008d000; // SPIMEM1\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n        this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\n        this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\n        this.PURPOSE_VAL_XTS_AES128_KEY = 4;\n        this.SUPPORTS_ENCRYPTED_FLASH = true;\n        this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\n        this.MEMORY_MAP = [\n            [0x00000000, 0x00010000, \"PADDING\"],\n            [0x40000000, 0x4c000000, \"DROM\"],\n            [0x4ff00000, 0x4ffa0000, \"DRAM\"],\n            [0x4ff00000, 0x4ffa0000, \"BYTE_ACCESSIBLE\"],\n            [0x4fc00000, 0x4fc20000, \"DROM_MASK\"],\n            [0x4fc00000, 0x4fc20000, \"IROM_MASK\"],\n            [0x40000000, 0x4c000000, \"IROM\"],\n            [0x4ff00000, 0x4ffa0000, \"IRAM\"],\n            [0x50108000, 0x50110000, \"RTC_IRAM\"],\n            [0x50108000, 0x50110000, \"RTC_DRAM\"],\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\n        ];\n        this.UF2_FAMILY_ID = 0x3d308e94;\n        this.EFUSE_MAX_KEY = 5;\n        this.KEY_PURPOSES = {\n            0: \"USER/EMPTY\",\n            1: \"ECDSA_KEY\",\n            2: \"XTS_AES_256_KEY_1\",\n            3: \"XTS_AES_256_KEY_2\",\n            4: \"XTS_AES_128_KEY\",\n            5: \"HMAC_DOWN_ALL\",\n            6: \"HMAC_DOWN_JTAG\",\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n            8: \"HMAC_UP\",\n            9: \"SECURE_BOOT_DIGEST0\",\n            10: \"SECURE_BOOT_DIGEST1\",\n            11: \"SECURE_BOOT_DIGEST2\",\n            12: \"KM_INIT_KEY\",\n        };\n    }\n    async getPkgVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 27) & 0x07;\n    }\n    async getMinorChipVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 0) & 0x0f;\n    }\n    async getMajorChipVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 4) & 0x03;\n    }\n    async getChipDescription(loader) {\n        const pkgVersion = await this.getPkgVersion(loader);\n        const chipName = pkgVersion === 0 ? \"ESP32-P4\" : \"unknown ESP32-P4\";\n        const majorRev = await this.getMajorChipVersion(loader);\n        const minorRev = await this.getMinorChipVersion(loader);\n        return `${chipName} (revision v${majorRev}.${minorRev})`;\n    }\n    async getChipFeatures(loader) {\n        return [\"High-Performance MCU\"];\n    }\n    async getCrystalFreq(loader) {\n        return 40; // ESP32P4 XTAL is fixed to 40MHz\n    }\n    async getFlashVoltage(loader) {\n        return;\n    }\n    async overrideVddsdio(loader) {\n        loader.debug(\"VDD_SDIO overrides are not supported for ESP32-P4\");\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    async getFlashCryptConfig(loader) {\n        return; // doesn't exist on ESP32-P4\n    }\n    async getSecureBootEnabled(laoder) {\n        const registerValue = await laoder.readReg(this.EFUSE_SECURE_BOOT_EN_REG);\n        return registerValue & this.EFUSE_SECURE_BOOT_EN_MASK;\n    }\n    async getKeyBlockPurpose(loader, keyBlock) {\n        if (keyBlock < 0 || keyBlock > this.EFUSE_MAX_KEY) {\n            loader.debug(`Valid key block numbers must be in range 0-${this.EFUSE_MAX_KEY}`);\n            return;\n        }\n        const regShiftDictionary = [\n            [this.EFUSE_PURPOSE_KEY0_REG, this.EFUSE_PURPOSE_KEY0_SHIFT],\n            [this.EFUSE_PURPOSE_KEY1_REG, this.EFUSE_PURPOSE_KEY1_SHIFT],\n            [this.EFUSE_PURPOSE_KEY2_REG, this.EFUSE_PURPOSE_KEY2_SHIFT],\n            [this.EFUSE_PURPOSE_KEY3_REG, this.EFUSE_PURPOSE_KEY3_SHIFT],\n            [this.EFUSE_PURPOSE_KEY4_REG, this.EFUSE_PURPOSE_KEY4_SHIFT],\n            [this.EFUSE_PURPOSE_KEY5_REG, this.EFUSE_PURPOSE_KEY5_SHIFT],\n        ];\n        const [reg, shift] = regShiftDictionary[keyBlock];\n        const registerValue = await loader.readReg(reg);\n        return (registerValue >> shift) & 0xf;\n    }\n    async isFlashEncryptionKeyValid(loader) {\n        const purposes = [];\n        for (let i = 0; i <= this.EFUSE_MAX_KEY; i++) {\n            const purpose = await this.getKeyBlockPurpose(loader, i);\n            purposes.push(purpose);\n        }\n        const isXtsAes128Key = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES128_KEY);\n        if (typeof isXtsAes128Key !== undefined) {\n            return true;\n        }\n        const isXtsAes256Key1 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_1);\n        const isXtsAes256Key2 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_2);\n        if (typeof isXtsAes256Key1 !== undefined && typeof isXtsAes256Key2 !== undefined) {\n            return true;\n        }\n        return false;\n    }\n}\n"],"names":["ESP32P4ROM","ESP32ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","IROM_MAP_START","IROM_MAP_END","DROM_MAP_START","DROM_MAP_END","BOOTLOADER_FLASH_OFFSET","CHIP_DETECT_MAGIC_VALUE","UART_DATE_REG_ADDR","EFUSE_BASE","EFUSE_BLOCK1_ADDR","MAC_EFUSE_REG","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","EFUSE_RD_REG_BASE","EFUSE_PURPOSE_KEY0_REG","EFUSE_PURPOSE_KEY0_SHIFT","EFUSE_PURPOSE_KEY1_REG","EFUSE_PURPOSE_KEY1_SHIFT","EFUSE_PURPOSE_KEY2_REG","EFUSE_PURPOSE_KEY2_SHIFT","EFUSE_PURPOSE_KEY3_REG","EFUSE_PURPOSE_KEY3_SHIFT","EFUSE_PURPOSE_KEY4_REG","EFUSE_PURPOSE_KEY4_SHIFT","EFUSE_PURPOSE_KEY5_REG","EFUSE_PURPOSE_KEY5_SHIFT","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT","EFUSE_SPI_BOOT_CRYPT_CNT_REG","EFUSE_SPI_BOOT_CRYPT_CNT_MASK","EFUSE_SECURE_BOOT_EN_REG","EFUSE_SECURE_BOOT_EN_MASK","PURPOSE_VAL_XTS_AES256_KEY_1","PURPOSE_VAL_XTS_AES256_KEY_2","PURPOSE_VAL_XTS_AES128_KEY","SUPPORTS_ENCRYPTED_FLASH","FLASH_ENCRYPTED_WRITE_ALIGN","MEMORY_MAP","UF2_FAMILY_ID","EFUSE_MAX_KEY","KEY_PURPOSES","getPkgVersion","loader","addr","readReg","getMinorChipVersion","getMajorChipVersion","getChipDescription","getChipFeatures","getCrystalFreq","getFlashVoltage","overrideVddsdio","debug","readMac","mac0","mac1","mac","Uint8Array","_d2h","getFlashCryptConfig","getSecureBootEnabled","laoder","getKeyBlockPurpose","keyBlock","regShiftDictionary","reg","shift","isFlashEncryptionKeyValid","purposes","i","purpose","push","undefined","find","p","isXtsAes256Key1","isXtsAes256Key2"],"mappings":"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","x_google_ignoreList":[0]}