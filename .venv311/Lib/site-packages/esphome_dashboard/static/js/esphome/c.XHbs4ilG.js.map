{"version":3,"file":"c.XHbs4ilG.js","sources":["../../../../node_modules/lit-html/directives/private-async-helpers.js","../../../../node_modules/lit-html/directives/until.js","../../../../src/compile/index.ts","../../../../src/install-web/index.ts","../../../../src/components/esphome-alert.ts","../../../../src/download-type/index.ts","../../../../src/install-choose/install-choose-dialog.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=async(t,s)=>{for await(const i of t)if(!1===await s(i))return};class s{constructor(t){this.G=t}disconnect(){this.G=void 0}reconnect(t){this.G=t}deref(){return this.G}}class i{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var t;null!==(t=this.Y)&&void 0!==t||(this.Y=new Promise((t=>this.Z=t)))}resume(){var t;null===(t=this.Z)||void 0===t||t.call(this),this.Y=this.Z=void 0}}export{i as Pauser,s as PseudoWeakRef,t as forAwaitOf};\n//# sourceMappingURL=private-async-helpers.js.map\n","import{noChange as t}from\"../lit-html.js\";import{isPrimitive as s}from\"../directive-helpers.js\";import{AsyncDirective as i}from\"../async-directive.js\";import{PseudoWeakRef as r,Pauser as e}from\"./private-async-helpers.js\";import{directive as o}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const n=t=>!s(t)&&\"function\"==typeof t.then,h=1073741823;class c extends i{constructor(){super(...arguments),this._$C_t=h,this._$Cwt=[],this._$Cq=new r(this),this._$CK=new e}render(...s){var i;return null!==(i=s.find((t=>!n(t))))&&void 0!==i?i:t}update(s,i){const r=this._$Cwt;let e=r.length;this._$Cwt=i;const o=this._$Cq,c=this._$CK;this.isConnected||this.disconnected();for(let t=0;t<i.length&&!(t>this._$C_t);t++){const s=i[t];if(!n(s))return this._$C_t=t,s;t<e&&s===r[t]||(this._$C_t=h,e=0,Promise.resolve(s).then((async t=>{for(;c.get();)await c.get();const i=o.deref();if(void 0!==i){const r=i._$Cwt.indexOf(s);r>-1&&r<i._$C_t&&(i._$C_t=r,i.setValue(t))}})))}return t}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}const m=o(c);export{c as UntilDirective,m as until};\n//# sourceMappingURL=until.js.map\n","const preload = () => import(\"./compile-dialog\");\n\nexport const openCompileDialog = (\n  configuration: string,\n  platformSupportsWebSerial: boolean,\n) => {\n  preload();\n  const dialog = document.createElement(\"esphome-compile-dialog\");\n  dialog.configuration = configuration;\n  dialog.platformSupportsWebSerial = platformSupportsWebSerial;\n  document.body.append(dialog);\n};\n","import { openNoPortPickedDialog } from \"../no-port-picked\";\nimport { createESPLoader } from \"../web-serial/create-esploader\";\nimport type { ESPHomeInstallWebDialog } from \"./install-web-dialog\";\n\nexport const preloadInstallWebDialog = () => import(\"./install-web-dialog\");\n\nexport const openInstallWebDialog = async (\n  params: ESPHomeInstallWebDialog[\"params\"],\n  // Called if a port has been picked and the dialog will be opened.\n  onDialogOpen?: () => void,\n): Promise<void> => {\n  preloadInstallWebDialog();\n\n  let port = params.port;\n\n  if (port) {\n    // ESPLoader likes opening the port.\n    await port.close();\n  } else {\n    try {\n      port = await navigator.serial.requestPort();\n    } catch (err: any) {\n      if ((err as DOMException).name === \"NotFoundError\") {\n        openNoPortPickedDialog(() =>\n          openInstallWebDialog(params, onDialogOpen),\n        );\n      } else {\n        alert(`Unable to connect: ${err.message}`);\n      }\n      return;\n    }\n  }\n  const esploader = createESPLoader(port);\n\n  if (onDialogOpen) {\n    onDialogOpen();\n  }\n\n  const dialog = document.createElement(\"esphome-install-web-dialog\");\n  dialog.params = params;\n  dialog.esploader = esploader;\n  document.body.append(dialog);\n};\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport \"./esphome-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\n@customElement(\"esphome-alert\")\nclass ESPHomeAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <esphome-svg-icon\n              .path=${ALERT_ICONS[this.alertType]}\n            ></esphome-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\"> </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      padding-left: var(--esphome-alert-padding-left, 8px);\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--alert-info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--alert-info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--alert-warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--alert-warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--alert-error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--alert-error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--alert-success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--alert-success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-alert\": ESPHomeAlert;\n  }\n}\n","const preload = () => import(\"./download-type-dialog\");\n\nexport const openDownloadTypeDialog = (\n  configuration: string,\n  platformSupportsWebSerial: boolean,\n) => {\n  preload();\n  const dialog = document.createElement(\"esphome-download-type-dialog\");\n  dialog.configuration = configuration;\n  dialog.platformSupportsWebSerial = platformSupportsWebSerial;\n  document.body.append(dialog);\n};\n","import { LitElement, html, PropertyValues, css, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { until } from \"lit/directives/until.js\";\nimport { getSerialPorts, ServerSerialPort } from \"../api/serial-ports\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-list/mwc-list-item.js\";\nimport \"@material/mwc-circular-progress\";\nimport \"@material/mwc-button\";\nimport { allowsWebSerial, metaChevronRight, supportsWebSerial } from \"../const\";\nimport { openInstallServerDialog } from \"../install-server\";\nimport { openCompileDialog } from \"../compile\";\nimport { openInstallWebDialog } from \"../install-web\";\nimport { compileConfiguration, getConfiguration } from \"../api/configuration\";\nimport { esphomeDialogStyles, esphomeSvgStyles } from \"../styles\";\nimport \"../components/esphome-alert\";\nimport { openDownloadTypeDialog } from \"../download-type\";\nimport { getFactoryDownloadUrl } from \"../api/download\";\n\nconst WARNING_ICON = \"ðŸ‘€\";\nconst ESPHOME_WEB_URL = \"https://web.esphome.io/?dashboard_install\";\n\n@customElement(\"esphome-install-choose-dialog\")\nclass ESPHomeInstallChooseDialog extends LitElement {\n  @property() public configuration!: string;\n\n  @state() private _ethernet = false;\n  @state() private _isPico = false;\n  @state() private _shouldDownloadFactory = false;\n\n  @state() private _ports?: ServerSerialPort[];\n\n  @state() private _state:\n    | \"pick_option\"\n    | \"download_instructions\"\n    | \"pick_server_port\" = \"pick_option\";\n\n  @state() private _error?: string | TemplateResult;\n\n  private _updateSerialInterval?: number;\n\n  private _compileConfiguration?: Promise<unknown>;\n\n  private _abortCompilation?: AbortController;\n\n  private get _platformSupportsWebSerial() {\n    return !this._isPico;\n  }\n\n  protected render() {\n    let heading;\n    let content;\n    let hideActions = false;\n\n    if (this._state === \"pick_option\") {\n      heading = `How do you want to install ${this.configuration} on your device?`;\n      content = html`\n        <mwc-list-item\n          twoline\n          hasMeta\n          .port=${\"OTA\"}\n          @click=${this._handleLegacyOption}\n        >\n          <span>${this._ethernet ? \"Via the network\" : \"Wirelessly\"}</span>\n          <span slot=\"secondary\">Requires the device to be online</span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          ?disabled=${!this._platformSupportsWebSerial}\n          @click=${this._handleBrowserInstall}\n        >\n          <span>Plug into this computer</span>\n          <span slot=\"secondary\">\n            ${this._platformSupportsWebSerial\n              ? \"For devices connected via USB to this computer\"\n              : \"Installing this via the web is not supported yet for this device\"}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item twoline hasMeta @click=${this._handleServerInstall}>\n          <span>Plug into the computer running ESPHome Device Builder</span>\n          <span slot=\"secondary\">\n            ${`For devices connected via USB to the server${\n              this._isPico ? \" and running ESPHome\" : \"\"\n            }`}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          @click=${() => {\n            this._isPico\n              ? (this._state = \"download_instructions\")\n              : this._handleCompileDialog();\n          }}\n        >\n          <span>Manual download</span>\n          <span slot=\"secondary\">\n            Install it yourself\n            ${this._isPico\n              ? \"by copying it to the Pico USB drive\"\n              : \"using ESPHome Web or other tools\"}\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          dialogAction=\"close\"\n          label=\"Cancel\"\n        ></mwc-button>\n      `;\n    } else if (this._state === \"pick_server_port\") {\n      heading = \"Pick Server Port\";\n      content =\n        this._ports === undefined\n          ? this._renderProgress(\"Loading serial devices\")\n          : html`\n              ${this._isPico\n                ? html`\n                    <esphome-alert type=\"warning\">\n                      Installation via the server requires the Pico to already\n                      run ESPHome.\n                    </esphome-alert>\n                  `\n                : \"\"}\n              ${this._ports.length === 0\n                ? this._renderMessage(\n                    WARNING_ICON,\n                    html`\n                      No serial devices found.\n                      <br /><br />\n                      This list automatically refreshes if you plug one in.\n                    `,\n                    false,\n                  )\n                : html`\n                    ${this._ports.map(\n                      (port) => html`\n                        <mwc-list-item\n                          twoline\n                          hasMeta\n                          .port=${port.port}\n                          @click=${this._handleLegacyOption}\n                        >\n                          <span>${port.desc}</span>\n                          <span slot=\"secondary\">${port.port}</span>\n                          ${metaChevronRight}\n                        </mwc-list-item>\n                      `,\n                    )}\n                  `}\n              <mwc-button\n                no-attention\n                slot=\"primaryAction\"\n                label=\"Back\"\n                @click=${() => {\n                  this._state = \"pick_option\";\n                }}\n              ></mwc-button>\n            `;\n    } else if (this._state === \"download_instructions\") {\n      let instructions: TemplateResult;\n      const downloadButton = until(\n        this._compileConfiguration,\n        html`<a download disabled href=\"#\">Download project</a>\n          preparing&nbsp;downloadâ€¦\n          <mwc-circular-progress\n            density=\"-8\"\n            indeterminate\n          ></mwc-circular-progress>`,\n      );\n\n      if (this._isPico) {\n        heading = \"Install ESPHome via the USB drive\";\n        instructions = html`\n          <div>\n            You can install your ESPHome project ${this.configuration} on your\n            device via your file explorer by following these steps:\n          </div>\n          <ol>\n            <li>Disconnect your Raspberry Pi Pico from your computer</li>\n            <li>\n              Hold the BOOTSEL button and connect the Pico to your computer. The\n              Pico will show up as a USB drive named RPI-RP2\n            </li>\n            <li>${downloadButton}</li>\n            <li>\n              Drag the downloaded file to the USB drive. The installation is\n              complete when the drive disappears\n            </li>\n            <li>Your Pico now runs your ESPHome project ðŸŽ‰</li>\n          </ol>\n        `;\n      } else {\n        heading = \"Install ESPHome via the browser\";\n        instructions = html`\n          <div>\n            ESPHome can install ${this.configuration} on your device via the\n            browser if certain requirements are met:\n          </div>\n          <ul>\n            <li>ESPHome is visited over HTTPS</li>\n            <li>Your browser supports WebSerial</li>\n          </ul>\n          <div>\n            Not all requirements are currently met. The easiest solution is to\n            download your project and do the installation with ESPHome Web.\n            ESPHome Web works 100% in your browser and no data will be shared\n            with the ESPHome project.\n          </div>\n          <ol>\n            <li>${downloadButton}</li>\n            <li>\n              <a href=${ESPHOME_WEB_URL} target=\"_blank\" rel=\"noopener\"\n                >Open ESPHome Web</a\n              >\n            </li>\n          </ol>\n        `;\n      }\n      content = html`\n        ${instructions}\n\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          label=\"Back\"\n          @click=${() => {\n            this._state = \"pick_option\";\n          }}\n        ></mwc-button>\n        <mwc-button\n          no-attention\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n      `;\n    }\n\n    return html`\n      <mwc-dialog\n        open\n        heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n        .hideActions=${hideActions}\n      >\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  _renderProgress(label: string | TemplateResult, progress?: number) {\n    return html`\n      <div class=\"center\">\n        <div>\n          <mwc-circular-progress\n            active\n            ?indeterminate=${progress === undefined}\n            .progress=${progress !== undefined ? progress / 100 : undefined}\n            density=\"8\"\n          ></mwc-circular-progress>\n          ${progress !== undefined\n            ? html`<div class=\"progress-pct\">${progress}%</div>`\n            : \"\"}\n        </div>\n        ${label}\n      </div>\n    `;\n  }\n\n  _renderMessage(\n    icon: string,\n    label: string | TemplateResult,\n    showClose: boolean,\n  ) {\n    return html`\n      <div class=\"center\">\n        <div class=\"icon\">${icon}</div>\n        ${label}\n      </div>\n      ${showClose\n        ? html`\n            <mwc-button\n              slot=\"primaryAction\"\n              dialogAction=\"ok\"\n              label=\"Close\"\n            ></mwc-button>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._updateSerialPorts();\n    getConfiguration(this.configuration).then((config) => {\n      this._ethernet = config.loaded_integrations.includes(\"ethernet\");\n      this._isPico = config.esp_platform === \"RP2040\";\n      // download firmware-factory.bin automatically, when compiling for web flashing\n      // remove along with removal of legacy format\n      this._shouldDownloadFactory = config.esp_platform === \"ESP32\";\n    });\n  }\n\n  private async _updateSerialPorts() {\n    this._ports = await getSerialPorts();\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (\n      changedProps.has(\"_state\") &&\n      this._state === \"download_instructions\" &&\n      !this._compileConfiguration\n    ) {\n      this._abortCompilation = new AbortController();\n      this._compileConfiguration = compileConfiguration(this.configuration)\n        .then(\n          () =>\n            this._shouldDownloadFactory\n              ? html`<a\n                  download\n                  href=\"${getFactoryDownloadUrl(this.configuration)}\"\n                  >Download project</a\n                >`\n              : html`<button\n                  class=\"link\"\n                  @click=${() => {\n                    openDownloadTypeDialog(\n                      this.configuration,\n                      this._platformSupportsWebSerial,\n                    );\n                  }}\n                  >Download project</a\n                >`,\n          () => html`\n            <a download disabled href=\"#\">Download project</a>\n            <span class=\"prepare-error\">preparation failed:</span>\n            <button\n              class=\"link\"\n              dialogAction=\"close\"\n              @click=${() => {\n                openCompileDialog(\n                  this.configuration,\n                  this._platformSupportsWebSerial,\n                );\n              }}\n            >\n              see what went wrong\n            </button>\n          `,\n        )\n        .finally(() => {\n          this._abortCompilation = undefined;\n        });\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"_state\")) {\n      return;\n    }\n    if (this._state === \"pick_server_port\") {\n      const updateAndSchedule = async () => {\n        await this._updateSerialPorts();\n        this._updateSerialInterval = window.setTimeout(async () => {\n          await updateAndSchedule();\n        }, 5000);\n      };\n      updateAndSchedule();\n    } else if (changedProps.get(\"_state\") === \"pick_server_port\") {\n      clearTimeout(this._updateSerialInterval);\n      this._updateSerialInterval = undefined;\n    }\n  }\n\n  private _storeDialogWidth() {\n    // Set the min width to avoid the dialog shrinking\n    this.style.setProperty(\n      \"--mdc-dialog-min-width\",\n      `${this.shadowRoot!.querySelector(\"mwc-list-item\")!.clientWidth + 4}px`,\n    );\n  }\n\n  private _handleServerInstall() {\n    this._storeDialogWidth();\n    this._state = \"pick_server_port\";\n  }\n\n  private _handleCompileDialog() {\n    openCompileDialog(this.configuration, this._platformSupportsWebSerial);\n    this._close();\n  }\n\n  private _handleLegacyOption(ev: Event) {\n    openInstallServerDialog(this.configuration, (ev.currentTarget as any).port);\n    this._close();\n  }\n\n  private _handleBrowserInstall() {\n    if (!supportsWebSerial || !allowsWebSerial) {\n      this._storeDialogWidth();\n      this._state = \"download_instructions\";\n      return;\n    }\n\n    openInstallWebDialog({ configuration: this.configuration }, () =>\n      this._close(),\n    );\n  }\n\n  private _close() {\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private async _handleClose() {\n    this._abortCompilation?.abort();\n\n    if (this._updateSerialInterval) {\n      clearTimeout(this._updateSerialInterval);\n      this._updateSerialInterval = undefined;\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    esphomeSvgStyles,\n    css`\n      mwc-list-item {\n        margin: 0 -20px;\n      }\n      .center {\n        text-align: center;\n      }\n      mwc-circular-progress {\n        margin-bottom: 16px;\n      }\n      li mwc-circular-progress {\n        margin: 0;\n      }\n      .progress-pct {\n        position: absolute;\n        top: 50px;\n        left: 0;\n        right: 0;\n      }\n      .icon {\n        font-size: 50px;\n        line-height: 80px;\n        color: black;\n      }\n      .show-ports {\n        margin-top: 16px;\n      }\n      .error {\n        padding: 8px 24px;\n        background-color: #fff59d;\n        margin: 0 -24px;\n      }\n      .prepare-error {\n        color: var(--alert-error-color);\n      }\n      ul,\n      ol {\n        padding-left: 24px;\n      }\n      li {\n        line-height: 2em;\n      }\n      li a {\n        display: inline-block;\n        margin-right: 8px;\n      }\n      a[disabled] {\n        pointer-events: none;\n        color: #999;\n      }\n      ol {\n        margin-bottom: 0;\n      }\n      a.bottom-left {\n        z-index: 1;\n        position: absolute;\n        line-height: 36px;\n        bottom: 9px;\n      }\n      esphome-alert {\n        color: black;\n        margin: 0 -24px;\n        display: block;\n        --esphome-alert-padding-left: 20px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-install-choose-dialog\": ESPHomeInstallChooseDialog;\n  }\n}\n"],"names":["s","constructor","t","this","G","disconnect","reconnect","deref","i","Y","Z","get","pause","Promise","resume","call","n","then","h","m","o","super","arguments","_$C_t","_$Cwt","_$Cq","r","_$CK","e","render","find","update","length","c","isConnected","disconnected","resolve","async","indexOf","setValue","reconnected","openCompileDialog","configuration","platformSupportsWebSerial","import","dialog","document","createElement","body","append","openInstallWebDialog","params","onDialogOpen","port","close","navigator","serial","requestPort","err","name","openNoPortPickedDialog","alert","message","esploader","createESPLoader","ALERT_ICONS","info","mdiInformationOutline","warning","mdiAlertOutline","error","mdiAlertCircleOutline","success","mdiCheckboxMarkedCircleOutline","ESPHomeAlert","LitElement","title","alertType","rtl","html","classMap","styles","css","__decorate","property","prototype","attribute","type","Boolean","customElement","openDownloadTypeDialog","ESPHomeInstallChooseDialog","_ethernet","_isPico","_shouldDownloadFactory","_state","_platformSupportsWebSerial","heading","content","_handleLegacyOption","metaChevronRight","_error","_handleBrowserInstall","_handleServerInstall","_handleCompileDialog","undefined","_ports","_renderProgress","_renderMessage","map","desc","instructions","downloadButton","until","_compileConfiguration","_handleClose","label","progress","icon","showClose","firstUpdated","changedProps","_updateSerialPorts","getConfiguration","config","loaded_integrations","includes","esp_platform","getSerialPorts","willUpdate","has","_abortCompilation","AbortController","compileConfiguration","getFactoryDownloadUrl","finally","updated","updateAndSchedule","_updateSerialInterval","window","setTimeout","clearTimeout","_storeDialogWidth","style","setProperty","shadowRoot","querySelector","clientWidth","_close","ev","openInstallServerDialog","currentTarget","supportsWebSerial","allowsWebSerial","_a","abort","parentNode","removeChild","esphomeDialogStyles","esphomeSvgStyles","state"],"mappings":"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","x_google_ignoreList":[0,1]}