{"version":3,"file":"c.BS3PocV3.js","sources":["../../../../src/util/line-break-transformer.ts","../../../../src/util/timestamp-transformer.ts","../../../../src/util/esphome-log-transformer.ts","../../../../src/logs-webserial/ewt-console.ts","../../../../src/logs-webserial/logs-webserial-dialog.ts"],"sourcesContent":["export class LineBreakTransformer implements Transformer<string, string> {\n  private chunks = \"\";\n\n  transform(\n    chunk: string,\n    controller: TransformStreamDefaultController<string>,\n  ) {\n    // Append new chunks to existing chunks.\n    this.chunks += chunk;\n    // For each line breaks in chunks, send the parsed lines out.\n    const lines = this.chunks.split(/\\r?\\n/);\n    this.chunks = lines.pop()!;\n    lines.forEach((line) => controller.enqueue(`${line}\\r\\n`));\n  }\n\n  flush(controller: TransformStreamDefaultController<string>) {\n    // When the stream is closed, flush any remaining chunks out.\n    controller.enqueue(this.chunks);\n  }\n}\n","export class TimestampTransformer implements Transformer<string, string> {\n  transform(\n    chunk: string,\n    controller: TransformStreamDefaultController<string>,\n  ) {\n    const date = new Date();\n    const h = date.getHours().toString().padStart(2, \"0\");\n    const m = date.getMinutes().toString().padStart(2, \"0\");\n    const s = date.getSeconds().toString().padStart(2, \"0\");\n    controller.enqueue(`[${h}:${m}:${s}]${chunk}`);\n  }\n}\n","export class ESPHomeLogTransformer implements Transformer<string, string> {\n  private lastHeader = \"\";\n  private lastColorReset = \"\";\n\n  transform(\n    chunk: string,\n    controller: TransformStreamDefaultController<string>,\n  ) {\n    // Check if this line has a header (timestamp, level, component)\n    const headerMatch = chunk.match(/^(.*?\\]:)/);\n\n    if (headerMatch) {\n      // This is a new log entry with a header\n      this.lastHeader = headerMatch[1];\n\n      // Extract any color codes from the header to determine reset needed\n      const colorMatch = this.lastHeader.match(/\\x1b\\[[0-9;]*m/g);\n      if (colorMatch) {\n        // If header has color codes, we need to reset at end of lines\n        this.lastColorReset = \"\\x1b[0m\";\n      } else {\n        this.lastColorReset = \"\";\n      }\n\n      // Ensure the line ends with a reset if it contains color codes\n      let processedChunk = chunk;\n      if (this.lastColorReset && !chunk.endsWith(\"\\x1b[0m\")) {\n        processedChunk = chunk + this.lastColorReset;\n      }\n\n      controller.enqueue(processedChunk);\n    } else if (chunk.trim() && chunk.startsWith(\" \") && this.lastHeader) {\n      // This is a continuation line (starts with space)\n      let newLine = this.lastHeader + chunk;\n\n      // Ensure the line ends with a reset if needed\n      if (this.lastColorReset && !newLine.endsWith(\"\\x1b[0m\")) {\n        newLine = newLine + this.lastColorReset;\n      }\n\n      controller.enqueue(newLine);\n    } else {\n      // Regular line without special handling\n      controller.enqueue(chunk);\n    }\n  }\n}\n","import { ColoredConsole, coloredConsoleStyles } from \"../util/console-color\";\nimport { sleep } from \"../util/sleep\";\nimport { LineBreakTransformer } from \"../util/line-break-transformer\";\nimport { TimestampTransformer } from \"../util/timestamp-transformer\";\nimport { ESPHomeLogTransformer } from \"../util/esphome-log-transformer\";\nimport { Logger } from \"../const\";\n\nexport class EwtConsole extends HTMLElement {\n  public port!: SerialPort;\n  public logger!: Logger;\n  public allowInput = true;\n\n  private _console?: ColoredConsole;\n  private _cancelConnection?: () => Promise<void>;\n\n  public logs(): string {\n    return this._console?.logs() || \"\";\n  }\n\n  public connectedCallback() {\n    if (this._console) {\n      return;\n    }\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot.innerHTML = `\n      <style>\n        :host, input {\n          background-color: #1c1c1c;\n          color: #ddd;\n          font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier,\n            monospace;\n          line-height: 1.45;\n          display: flex;\n          flex-direction: column;\n        }\n        form {\n          display: flex;\n          align-items: center;\n          padding: 0 8px 0 16px;\n        }\n        input {\n          flex: 1;\n          padding: 4px;\n          margin: 0 8px;\n          border: 0;\n          outline: none;\n        }\n        ${coloredConsoleStyles}\n      </style>\n      <div class=\"log\"></div>\n      ${\n        this.allowInput\n          ? `<form>\n                >\n                <input autofocus>\n              </form>\n            `\n          : \"\"\n      }\n    `;\n\n    this._console = new ColoredConsole(this.shadowRoot!.querySelector(\"div\")!);\n\n    if (this.allowInput) {\n      const input = this.shadowRoot!.querySelector(\"input\")!;\n\n      this.addEventListener(\"click\", () => {\n        // Only focus input if user didn't select some text\n        if (getSelection()?.toString() === \"\") {\n          input.focus();\n        }\n      });\n\n      input.addEventListener(\"keydown\", (ev) => {\n        if (ev.key === \"Enter\") {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._sendCommand();\n        }\n      });\n    }\n\n    const abortController = new AbortController();\n    const connection = this._connect(abortController.signal);\n    this._cancelConnection = () => {\n      abortController.abort();\n      return connection;\n    };\n  }\n\n  private async _connect(abortSignal: AbortSignal) {\n    this.logger.debug(\"Starting console read loop\");\n    try {\n      await this.port\n        .readable!.pipeThrough(new TextDecoderStream(), {\n          signal: abortSignal,\n        })\n        .pipeThrough(new TransformStream(new LineBreakTransformer()))\n        .pipeThrough(new TransformStream(new ESPHomeLogTransformer()))\n        .pipeThrough(new TransformStream(new TimestampTransformer()))\n        .pipeTo(\n          new WritableStream({\n            write: (chunk) => {\n              this._console!.addLine(chunk.replace(\"\\r\", \"\"));\n            },\n          }),\n        );\n      if (!abortSignal.aborted) {\n        this._console!.addLine(\"\");\n        this._console!.addLine(\"\");\n        this._console!.addLine(\"Terminal disconnected\");\n      }\n    } catch (e) {\n      this._console!.addLine(\"\");\n      this._console!.addLine(\"\");\n      this._console!.addLine(`Terminal disconnected: ${e}`);\n    } finally {\n      await sleep(100);\n      this.logger.debug(\"Finished console read loop\");\n    }\n  }\n\n  private async _sendCommand() {\n    const input = this.shadowRoot!.querySelector(\"input\")!;\n    const command = input.value;\n    const encoder = new TextEncoder();\n    const writer = this.port.writable!.getWriter();\n    await writer.write(encoder.encode(`${command}\\r\\n`));\n    this._console!.addLine(`> ${command}\\r\\n`);\n    input.value = \"\";\n    input.focus();\n    try {\n      writer.releaseLock();\n    } catch (err) {\n      console.error(\"Ignoring release lock error\", err);\n    }\n  }\n\n  public async disconnect() {\n    if (this._cancelConnection) {\n      await this._cancelConnection();\n      this._cancelConnection = undefined;\n    }\n  }\n\n  public async reset() {\n    this.logger.debug(\"Triggering reset.\");\n    await this.port.setSignals({\n      dataTerminalReady: false,\n      requestToSend: true,\n    });\n    await this.port.setSignals({\n      dataTerminalReady: false,\n      requestToSend: false,\n    });\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  }\n}\n\ncustomElements.define(\"ewt-console\", EwtConsole);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ewt-console\": EwtConsole;\n  }\n}\n","import { LitElement, html, css, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-button\";\nimport \"./ewt-console\";\nimport { textDownload } from \"../util/file-download\";\nimport type { EwtConsole } from \"./ewt-console\";\nimport { basename } from \"../util/basename\";\nimport { openEditDialog } from \"../editor\";\nimport { getConfiguration } from \"../api/configuration\";\nimport { esphomeDialogStyles } from \"../styles\";\n\n@customElement(\"esphome-logs-webserial-dialog\")\nclass ESPHomeLogsWebSerialDialog extends LitElement {\n  @property() public configuration?: string;\n\n  @property() public port!: SerialPort;\n\n  @property() public closePortOnClose!: boolean;\n\n  @query(\"ewt-console\") private _console!: EwtConsole;\n\n  @state() private _isPico = false;\n\n  protected render() {\n    return html`\n      <mwc-dialog\n        open\n        .heading=${this.configuration ? `Logs ${this.configuration}` : \"Logs\"}\n        scrimClickAction\n        @closed=${this._handleClose}\n      >\n        <ewt-console\n          .port=${this.port}\n          .logger=${console}\n          .allowInput=${false}\n        ></ewt-console>\n        <mwc-button\n          slot=\"secondaryAction\"\n          label=\"Download Logs\"\n          @click=${this._downloadLogs}\n        ></mwc-button>\n        ${this.configuration\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                dialogAction=\"close\"\n                label=\"Edit\"\n                @click=${this._openEdit}\n              ></mwc-button>\n            `\n          : \"\"}\n        ${this._isPico\n          ? \"\"\n          : html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                label=\"Reset Device\"\n                @click=${this._resetDevice}\n              ></mwc-button>\n            `}\n        <mwc-button\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n      </mwc-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.configuration) {\n      getConfiguration(this.configuration).then((config) => {\n        this._isPico = config.esp_platform === \"RP2040\";\n      });\n    }\n  }\n\n  private async _openEdit() {\n    if (this.configuration) openEditDialog(this.configuration);\n  }\n\n  private async _handleClose() {\n    await this._console.disconnect();\n    if (this.closePortOnClose) {\n      await this.port.close();\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  private async _resetDevice() {\n    await this._console.reset();\n  }\n\n  private _downloadLogs() {\n    textDownload(\n      this._console.logs(),\n      `${\n        this.configuration ? `${basename(this.configuration)}_logs` : \"logs\"\n      }.txt`,\n    );\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      mwc-dialog {\n        --mdc-dialog-max-width: 90vw;\n      }\n      ewt-console {\n        width: calc(80vw - 48px);\n        height: calc(90vh - 128px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-logs-webserial-dialog\": ESPHomeLogsWebSerialDialog;\n  }\n}\n"],"names":["LineBreakTransformer","constructor","this","chunks","transform","chunk","controller","lines","split","pop","forEach","line","enqueue","flush","TimestampTransformer","date","Date","h","getHours","toString","padStart","m","getMinutes","s","getSeconds","ESPHomeLogTransformer","lastHeader","lastColorReset","headerMatch","match","colorMatch","processedChunk","endsWith","trim","startsWith","newLine","EwtConsole","HTMLElement","allowInput","logs","_a","_console","connectedCallback","attachShadow","mode","innerHTML","coloredConsoleStyles","ColoredConsole","shadowRoot","querySelector","input","addEventListener","getSelection","focus","ev","key","preventDefault","stopPropagation","_sendCommand","abortController","AbortController","connection","_connect","signal","_cancelConnection","abort","abortSignal","logger","debug","port","readable","pipeThrough","TextDecoderStream","TransformStream","pipeTo","WritableStream","write","addLine","replace","aborted","e","sleep","command","value","encoder","TextEncoder","writer","writable","getWriter","encode","releaseLock","err","console","error","disconnect","undefined","reset","setSignals","dataTerminalReady","requestToSend","Promise","resolve","setTimeout","customElements","define","ESPHomeLogsWebSerialDialog","LitElement","_isPico","render","html","configuration","_handleClose","_downloadLogs","_openEdit","_resetDevice","firstUpdated","changedProps","super","getConfiguration","then","config","esp_platform","openEditDialog","closePortOnClose","close","parentNode","removeChild","textDownload","basename","styles","esphomeDialogStyles","css","__decorate","property","prototype","query","state","customElement"],"mappings":"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"}