{"version":3,"file":"c.kS8Re-lP.js","sources":["../../../../src/logs/index.ts","../../../../src/logs-webserial/index.ts","../../../../src/logs-target/logs-target-dialog.ts"],"sourcesContent":["const preload = () => import(\"./logs-dialog\");\n\nexport const openLogsDialog = (configuration: string, target: string) => {\n  preload();\n  const dialog = document.createElement(\"esphome-logs-dialog\");\n  dialog.configuration = configuration;\n  dialog.target = target;\n  document.body.append(dialog);\n};\n","export const preloadLogsWebSerialDialog = () =>\n  import(\"./logs-webserial-dialog\");\n\nexport const openLogsWebSerialDialog = (\n  port: SerialPort,\n  closePortOnClose: boolean,\n  configuration?: string,\n) => {\n  preloadLogsWebSerialDialog();\n  const dialog = document.createElement(\"esphome-logs-webserial-dialog\");\n  dialog.configuration = configuration;\n  dialog.port = port;\n  dialog.closePortOnClose = closePortOnClose;\n  document.body.append(dialog);\n};\n","import { LitElement, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport \"@material/mwc-button\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-list/mwc-list-item.js\";\nimport \"../components/remote-process\";\nimport \"../components/process-dialog\";\nimport { openLogsDialog } from \"../logs\";\nimport { getSerialPorts, ServerSerialPort } from \"../api/serial-ports\";\nimport { allowsWebSerial, metaChevronRight, supportsWebSerial } from \"../const\";\nimport { openLogsWebSerialDialog } from \"../logs-webserial\";\nimport { esphomeDialogStyles, esphomeSvgStyles } from \"../styles\";\n\nconst ESPHOME_WEB_URL = \"https://web.esphome.io/?dashboard_logs\";\n\n@customElement(\"esphome-logs-target-dialog\")\nclass ESPHomeLogsTargetDialog extends LitElement {\n  @property() public configuration!: string;\n\n  @state() private _ports?: ServerSerialPort[];\n\n  @state() private _show: \"options\" | \"web_instructions\" | \"server_ports\" =\n    \"options\";\n\n  protected render() {\n    let heading;\n    let content;\n\n    if (this._show === \"options\") {\n      heading = \"How to get the logs for your device?\";\n      content = html`\n        <mwc-list-item\n          twoline\n          hasMeta\n          dialogAction=\"close\"\n          .port=${\"OTA\"}\n          @click=${this._pickPort}\n        >\n          <span>Wirelessly</span>\n          <span slot=\"secondary\">Requires the device to be online</span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item\n          twoline\n          hasMeta\n          .port=${\"WEBSERIAL\"}\n          @click=${this._pickWebSerial}\n        >\n          <span>Plug into this computer</span>\n          <span slot=\"secondary\">\n            For devices connected via USB to this computer\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n\n        <mwc-list-item twoline hasMeta @click=${this._showServerPorts}>\n          <span>Plug into computer running ESPHome Dashboard</span>\n          <span slot=\"secondary\">\n            For devices connected via USB to the server\n          </span>\n          ${metaChevronRight}\n        </mwc-list-item>\n        <mwc-button\n          no-attention\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Cancel\"\n        ></mwc-button>\n      `;\n    } else if (this._show === \"web_instructions\") {\n      heading = \"View logs in the browser\";\n      content = html`\n        <div>\n          ESPHome can view the logs of your device via the browser if certain\n          requirements are met:\n        </div>\n        <ul>\n          <li>ESPHome is visited over HTTPS</li>\n          <li>Your browser supports WebSerial</li>\n        </ul>\n        <div>\n          Not all requirements are currently met. The easiest solution is to\n          view the logs with ESPHome Web. ESPHome Web works 100% in your browser\n          and no data will be shared with the ESPHome project.\n        </div>\n\n        <a\n          slot=\"primaryAction\"\n          href=${ESPHOME_WEB_URL}\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <mwc-button\n            dialogAction=\"close\"\n            label=\"OPEN ESPHOME WEB\"\n          ></mwc-button>\n        </a>\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          label=\"Back\"\n          @click=${() => {\n            this._show = \"options\";\n          }}\n        ></mwc-button>\n      `;\n    } else {\n      heading = \"Pick server port\";\n      content = html`${this._ports === undefined\n          ? html`\n              <mwc-list-item>\n                <span>Loading portsâ€¦</span>\n              </mwc-list-item>\n            `\n          : this._ports.length === 0\n            ? html`\n                <mwc-list-item>\n                  <span>No serial ports found.</span>\n                </mwc-list-item>\n              `\n            : this._ports.map(\n                (port) => html`\n                  <mwc-list-item\n                    twoline\n                    hasMeta\n                    dialogAction=\"close\"\n                    .port=${port.port}\n                    @click=${this._pickPort}\n                  >\n                    <span>${port.desc}</span>\n                    <span slot=\"secondary\">${port.port}</span>\n                    ${metaChevronRight}\n                  </mwc-list-item>\n                `,\n              )}\n\n        <mwc-button\n          no-attention\n          slot=\"primaryAction\"\n          label=\"Back\"\n          @click=${() => {\n            this._show = \"options\";\n          }}\n        ></mwc-button>`;\n    }\n\n    return html`\n      <mwc-dialog\n        open\n        heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n      >\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    getSerialPorts().then((ports) => {\n      if (ports.length === 0 && !supportsWebSerial) {\n        // Automatically pick wireless option if no other options available\n        this._handleClose();\n        openLogsDialog(this.configuration, \"OTA\");\n      } else {\n        this._ports = ports;\n      }\n    });\n  }\n\n  private _showServerPorts() {\n    this._show = \"server_ports\";\n  }\n\n  private _pickPort(ev: Event) {\n    openLogsDialog(this.configuration, (ev.currentTarget as any).port);\n  }\n\n  private async _pickWebSerial(ev: Event) {\n    if (!supportsWebSerial || !allowsWebSerial) {\n      this._show = \"web_instructions\";\n      return;\n    }\n\n    try {\n      const port = await navigator.serial.requestPort();\n      await port.open({ baudRate: 115200, bufferSize: 8192 });\n      this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n      openLogsWebSerialDialog(port, true, this.configuration);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  private _handleClose() {\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    esphomeSvgStyles,\n    css`\n      mwc-list-item {\n        margin: 0 -20px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-logs-target-dialog\": ESPHomeLogsTargetDialog;\n  }\n}\n"],"names":["openLogsDialog","configuration","target","import","dialog","document","createElement","body","append","openLogsWebSerialDialog","port","closePortOnClose","ESPHomeLogsTargetDialog","LitElement","constructor","this","_show","render","heading","content","html","_pickPort","metaChevronRight","_pickWebSerial","_showServerPorts","undefined","_ports","length","map","desc","_handleClose","firstUpdated","changedProperties","super","getSerialPorts","then","ports","supportsWebSerial","ev","currentTarget","allowsWebSerial","navigator","serial","requestPort","open","baudRate","bufferSize","shadowRoot","querySelector","close","err","console","error","parentNode","removeChild","styles","esphomeDialogStyles","esphomeSvgStyles","css","__decorate","property","prototype","state","customElement"],"mappings":"iOAAA,MAEaA,EAAiB,CAACC,EAAuBC,KAFhCC,OAAO,mBAI3B,MAAMC,EAASC,SAASC,cAAc,uBACtCF,EAAOH,cAAgBA,EACvBG,EAAOF,OAASA,EAChBG,SAASE,KAAKC,OAAOJ,EAAO,ECJjBK,EAA0B,CACrCC,EACAC,EACAV,KALAE,OAAO,mBAQP,MAAMC,EAASC,SAASC,cAAc,iCACtCF,EAAOH,cAAgBA,EACvBG,EAAOM,KAAOA,EACdN,EAAOO,iBAAmBA,EAC1BN,SAASE,KAAKC,OAAOJ,EAAO,ECG9B,IAAMQ,EAAN,cAAsCC,EAAtC,WAAAC,uBAKmBC,KAAKC,MACpB,UAEQ,MAAAC,GACR,IAAIC,EACAC,EAyHJ,MAvHmB,YAAfJ,KAAKC,OACPE,EAAU,uCACVC,EAAUC,CAAI;;;;;kBAKF;mBACCL,KAAKM;;;;YAIZC;;;;;;kBAMM;mBACCP,KAAKQ;;;;;;YAMZD;;;gDAGoCP,KAAKS;;;;;YAKzCF;;;;;;;;SASkB,qBAAfP,KAAKC,OACdE,EAAU,2BACVC,EAAUC,CAAI;;;;;;;;;;;;;;;;;iBA3DI;;;;;;;;;;;;;mBAyFL,KACPL,KAAKC,MAAQ,SAAS;;UAK5BE,EAAU,mBACVC,EAAUC,CAAI,QAAmBK,IAAhBV,KAAKW,OAChBN,CAAI;;;;cAKmB,IAAvBL,KAAKW,OAAOC,OACVP,CAAI;;;;gBAKJL,KAAKW,OAAOE,KACTlB,GAASU,CAAI;;;;;4BAKFV,EAAKA;6BACJK,KAAKM;;4BAENX,EAAKmB;6CACYnB,EAAKA;sBAC5BY;;;;;;;;mBASH,KACPP,KAAKC,MAAQ,SAAS;yBAKvBI,CAAI;;;kBAGGF;;kBAEAH,KAAKe;;UAEbX;;MAKE,YAAAY,CAAaC,GACrBC,MAAMF,aAAaC,GACnBE,IAAiBC,MAAMC,IACA,IAAjBA,EAAMT,QAAiBU,EAKzBtB,KAAKW,OAASU,GAHdrB,KAAKe,eACL9B,EAAee,KAAKd,cAAe,WAOjC,gBAAAuB,GACNT,KAAKC,MAAQ,eAGP,SAAAK,CAAUiB,GAChBtC,EAAee,KAAKd,cAAgBqC,EAAGC,cAAsB7B,MAGvD,oBAAMa,CAAee,GAC3B,GAAKD,GAAsBG,EAK3B,IACE,MAAM9B,QAAa+B,UAAUC,OAAOC,oBAC9BjC,EAAKkC,KAAK,CAAEC,SAAU,OAAQC,WAAY,OAChD/B,KAAKgC,WAAYC,cAAc,cAAeC,QAC9CxC,EAAwBC,GAAM,EAAMK,KAAKd,eACzC,MAAOiD,GACPC,QAAQC,MAAMF,QAVdnC,KAAKC,MAAQ,mBAcT,YAAAc,GACNf,KAAKsC,WAAYC,YAAYvC,QAGxBH,EAAA2C,OAAS,CACdC,EACAC,EACAC,CAAG;;;;OA1LcC,EAAA,CAAlBC,KAAyChD,EAAAiD,UAAA,qBAAA,GAEzBF,EAAA,CAAhBG,KAA4ClD,EAAAiD,UAAA,cAAA,GAE5BF,EAAA,CAAhBG,KACWlD,EAAAiD,UAAA,aAAA,GANRjD,EAAuB+C,EAAA,CAD5BI,EAAc,+BACTnD"}