{"version":3,"file":"c.Cvj22hzj.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp8266.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nexport class ESP8266ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP8266\";\n        this.CHIP_DETECT_MAGIC_VALUE = [0xfff0c101];\n        this.EFUSE_RD_REG_BASE = 0x3ff00050;\n        this.UART_CLKDIV_REG = 0x60000014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.XTAL_CLK_DIVIDER = 2;\n        this.FLASH_WRITE_SIZE = 0x4000;\n        // NOT IMPLEMENTED, SETTING EMPTY VALUE\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.UART_DATE_REG_ADDR = 0;\n        this.FLASH_SIZES = {\n            \"512KB\": 0x00,\n            \"256KB\": 0x10,\n            \"1MB\": 0x20,\n            \"2MB\": 0x30,\n            \"4MB\": 0x40,\n            \"2MB-c1\": 0x50,\n            \"4MB-c1\": 0x60,\n            \"8MB\": 0x80,\n            \"16MB\": 0x90,\n        };\n        this.SPI_REG_BASE = 0x60000200;\n        this.SPI_USR_OFFS = 0x1c;\n        this.SPI_USR1_OFFS = 0x20;\n        this.SPI_USR2_OFFS = 0x24;\n        this.SPI_MOSI_DLEN_OFFS = 0; // not in esp8266\n        this.SPI_MISO_DLEN_OFFS = 0; // not in esp8266\n        this.SPI_W0_OFFS = 0x40;\n        this.getChipFeatures = async (loader) => {\n            const features = [\"WiFi\"];\n            if ((await this.getChipDescription(loader)) == \"ESP8285\")\n                features.push(\"Embedded Flash\");\n            return features;\n        };\n    }\n    async readEfuse(loader, offset) {\n        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\n        loader.debug(\"Read efuse \" + addr);\n        return await loader.readReg(addr);\n    }\n    async getChipDescription(loader) {\n        const efuse3 = await this.readEfuse(loader, 2);\n        const efuse0 = await this.readEfuse(loader, 0);\n        const is8285 = ((efuse0 & (1 << 4)) | (efuse3 & (1 << 16))) != 0; // One or the other efuse bit is set for ESP8285\n        return is8285 ? \"ESP8285\" : \"ESP8266EX\";\n    }\n    async getCrystalFreq(loader) {\n        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let normXtal;\n        if (etsXtal > 33) {\n            normXtal = 40;\n        }\n        else {\n            normXtal = 26;\n        }\n        if (Math.abs(normXtal - etsXtal) > 1) {\n            loader.info(\"WARNING: Detected crystal freq \" +\n                etsXtal +\n                \"MHz is quite different to normalized freq \" +\n                normXtal +\n                \"MHz. Unsupported crystal in use?\");\n        }\n        return normXtal;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await this.readEfuse(loader, 0);\n        mac0 = mac0 >>> 0;\n        let mac1 = await this.readEfuse(loader, 1);\n        mac1 = mac1 >>> 0;\n        let mac3 = await this.readEfuse(loader, 3);\n        mac3 = mac3 >>> 0;\n        const mac = new Uint8Array(6);\n        if (mac3 != 0) {\n            mac[0] = (mac3 >> 16) & 0xff;\n            mac[1] = (mac3 >> 8) & 0xff;\n            mac[2] = mac3 & 0xff;\n        }\n        else if (((mac1 >> 16) & 0xff) == 0) {\n            mac[0] = 0x18;\n            mac[1] = 0xfe;\n            mac[2] = 0x34;\n        }\n        else if (((mac1 >> 16) & 0xff) == 1) {\n            mac[0] = 0xac;\n            mac[1] = 0xd0;\n            mac[2] = 0x74;\n        }\n        else {\n            loader.error(\"Unknown OUI\");\n        }\n        mac[3] = (mac1 >> 8) & 0xff;\n        mac[4] = mac1 & 0xff;\n        mac[5] = (mac0 >> 24) & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP8266ROM","ROM","constructor","super","arguments","this","CHIP_NAME","CHIP_DETECT_MAGIC_VALUE","EFUSE_RD_REG_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","XTAL_CLK_DIVIDER","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","UART_DATE_REG_ADDR","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","getChipFeatures","async","loader","features","getChipDescription","push","readEfuse","offset","addr","debug","readReg","efuse3","getCrystalFreq","uartDiv","etsXtal","transport","baudrate","normXtal","Math","abs","info","_d2h","d","h","toString","length","readMac","mac0","mac1","mac3","mac","Uint8Array","error","getEraseSize","size"],"mappings":"oCACO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,UACjBD,KAAKE,wBAA0B,CAAC,YAChCF,KAAKG,kBAAoB,WACzBH,KAAKI,gBAAkB,WACvBJ,KAAKK,iBAAmB,QACxBL,KAAKM,iBAAmB,EACxBN,KAAKO,iBAAmB,MAExBP,KAAKQ,wBAA0B,EAC/BR,KAAKS,mBAAqB,EAC1BT,KAAKU,YAAc,CACf,QAAS,EACT,QAAS,GACT,MAAO,GACP,MAAO,GACP,MAAO,GACP,SAAU,GACV,SAAU,GACV,MAAO,IACP,OAAQ,KAEZV,KAAKW,aAAe,WACpBX,KAAKY,aAAe,GACpBZ,KAAKa,cAAgB,GACrBb,KAAKc,cAAgB,GACrBd,KAAKe,mBAAqB,EAC1Bf,KAAKgB,mBAAqB,EAC1BhB,KAAKiB,YAAc,GACnBjB,KAAKkB,gBAAkBC,MAAOC,IAC1B,MAAMC,EAAW,CAAC,QAGlB,MAF+C,iBAApCrB,KAAKsB,mBAAmBF,IAC/BC,EAASE,KAAK,kBACXF,CAAQ,CAE3B,CACI,eAAMG,CAAUJ,EAAQK,GACpB,MAAMC,EAAO1B,KAAKG,kBAAoB,EAAIsB,EAE1C,OADAL,EAAOO,MAAM,cAAgBD,SAChBN,EAAOQ,QAAQF,EACpC,CACI,wBAAMJ,CAAmBF,GACrB,MAAMS,QAAe7B,KAAKwB,UAAUJ,EAAQ,GAG5C,OAD+D,IAAxC,SADFpB,KAAKwB,UAAUJ,EAAQ,SACLS,GACvB,UAAY,WACpC,CACI,oBAAMC,CAAeV,GACjB,MAAMW,QAAiBX,EAAOQ,QAAQ5B,KAAKI,iBAAoBJ,KAAKK,iBAC9D2B,EAAWZ,EAAOa,UAAUC,SAAWH,EAAW,IAAU/B,KAAKM,iBACvE,IAAI6B,EAcJ,OAZIA,EADAH,EAAU,GACC,GAGA,GAEXI,KAAKC,IAAIF,EAAWH,GAAW,GAC/BZ,EAAOkB,KAAK,kCACRN,EACA,6CACAG,EACA,oCAEDA,CACf,CACI,IAAAI,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CAC1C,CACI,aAAMG,CAAQxB,GACV,IAAIyB,QAAa7C,KAAKwB,UAAUJ,EAAQ,GACxCyB,KAAgB,EAChB,IAAIC,QAAa9C,KAAKwB,UAAUJ,EAAQ,GACxC0B,KAAgB,EAChB,IAAIC,QAAa/C,KAAKwB,UAAUJ,EAAQ,GACxC2B,KAAgB,EAChB,MAAMC,EAAM,IAAIC,WAAW,GAsB3B,OArBY,GAARF,GACAC,EAAI,GAAMD,GAAQ,GAAM,IACxBC,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,GAEqB,IAAvBD,GAAQ,GAAM,MACrBE,EAAI,GAAK,GACTA,EAAI,GAAK,IACTA,EAAI,GAAK,IAEqB,IAAvBF,GAAQ,GAAM,MACrBE,EAAI,GAAK,IACTA,EAAI,GAAK,IACTA,EAAI,GAAK,KAGT5B,EAAO8B,MAAM,eAEjBF,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACTE,EAAI,GAAMH,GAAQ,GAAM,IAChB7C,KAAKuC,KAAKS,EAAI,IAClB,IACAhD,KAAKuC,KAAKS,EAAI,IACd,IACAhD,KAAKuC,KAAKS,EAAI,IACd,IACAhD,KAAKuC,KAAKS,EAAI,IACd,IACAhD,KAAKuC,KAAKS,EAAI,IACd,IACAhD,KAAKuC,KAAKS,EAAI,GAC1B,CACI,YAAAG,CAAa1B,EAAQ2B,GACjB,OAAOA,CACf","x_google_ignoreList":[0]}