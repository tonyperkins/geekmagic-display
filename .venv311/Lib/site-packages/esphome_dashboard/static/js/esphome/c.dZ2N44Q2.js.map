{"version":3,"file":"c.dZ2N44Q2.js","sources":["../../../../src/adopt/adopt-dialog.ts"],"sourcesContent":["import { LitElement, html, css, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport \"@material/mwc-button\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-textfield\";\nimport type { TextField } from \"@material/mwc-textfield\";\nimport { fireEvent } from \"../util/fire-event\";\nimport { ImportableDevice, importDevice } from \"../api/devices\";\nimport { checkHasWifiSecrets, storeWifiSecrets } from \"../api/wifi\";\nimport { esphomeDialogStyles } from \"../styles\";\nimport { openInstallServerDialog } from \"../install-server\";\nimport { getConfigurationApiKey } from \"../api/configuration\";\nimport { copyToClipboard } from \"../util/copy-clipboard\";\nimport { sleep } from \"../util/sleep\";\n\n@customElement(\"esphome-adopt-dialog\")\nclass ESPHomeAdoptDialog extends LitElement {\n  @property() public device!: ImportableDevice;\n\n  @state() private _hasWifiSecrets: boolean | undefined;\n\n  @state() private _state: \"ask\" | \"adopted\" | \"skipped\" = \"ask\";\n  @state() private _busy = false;\n  @state() private _error?: string;\n  @query(\".api-key-banner\") private _inputApiKeyBanner?: TextField;\n\n  private _nameOverride?: string;\n  private _configFilename!: string;\n  private _apiKey: string | null = null;\n\n  @query(\"mwc-textfield[name=ssid]\") private _inputSSID!: TextField;\n  @query(\"mwc-textfield[name=password]\") private _inputPassword!: TextField;\n  @query(\"mwc-textfield[name=name]\") private _inputName!: TextField;\n\n  protected render() {\n    let heading;\n    let content;\n\n    if (this._state === \"ask\") {\n      heading = \"Take Control\";\n      content = html`\n        <div>\n          Taking control of ${this.device.friendly_name || this.device.name}\n          will create a local ESPHome configuration for this device. This gives\n          you full control over the configuration. You will lose access to\n          vendor-provided firmware updates and will have to manually compile and\n          update the device in the ESPHome Device Builder. You can always revert\n          to vendor-provided updates, but this will require re-installing the\n          device.\n        </div>\n\n        ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n        ${this.device.friendly_name\n          ? html`\n              <mwc-textfield\n                label=\"New Name\"\n                name=\"name\"\n                required\n                dialogInitialFocus\n              ></mwc-textfield>\n            `\n          : \"\"}\n        ${!this._needsWifiSecrets\n          ? \"\"\n          : this._hasWifiSecrets !== false\n            ? html`\n                <div>\n                  This device will be configured to connect to the Wi-Fi network\n                  stored in your secrets.\n                </div>\n              `\n            : html`\n                <div>\n                  Enter the credentials of the Wi-Fi network that you want your\n                  device to connect to.\n                </div>\n                <div>\n                  This information will be stored in your secrets and used for\n                  this and future devices. You can edit the information later by\n                  editing your secrets at the top of the page.\n                </div>\n\n                <mwc-textfield\n                  label=\"Network name\"\n                  name=\"ssid\"\n                  required\n                  @blur=${this._cleanSSIDBlur}\n                  .disabled=${this._busy}\n                ></mwc-textfield>\n\n                <mwc-textfield\n                  label=\"Password\"\n                  name=\"password\"\n                  type=\"password\"\n                  helper=\"Leave blank if no password\"\n                  .disabled=${this._busy}\n                ></mwc-textfield>\n              `}\n\n        <mwc-button\n          slot=\"primaryAction\"\n          .label=${this._busy ? \"Taking controlâ€¦\" : \"Take control\"}\n          @click=${this._handleAdopt}\n          .disabled=${this._needsWifiSecrets &&\n          this._hasWifiSecrets === undefined}\n        ></mwc-button>\n        ${this._busy\n          ? \"\"\n          : html`\n              <mwc-button\n                no-attention\n                slot=\"secondaryAction\"\n                label=\"Cancel\"\n                dialogAction=\"cancel\"\n              ></mwc-button>\n            `}\n      `;\n    } else if (this._state === \"adopted\") {\n      heading = \"Configuration created\";\n      content = html`\n        <div>\n          To finish taking control of ${this._nameOverride || this.device.name},\n          the new configuration needs to be installed on the device.\n        </div>\n        ${this._apiKey\n          ? html`\n              <p>\n                Each ESPHome device has a unique encryption key to talk to other\n                devices. You will need this key to include your device in Home\n                Assistant. You can find the key later in the device menu.\n              </p>\n              <div class=\"api-key-container\">\n                <mwc-textfield\n                  label=\"Encryption key\"\n                  readonly\n                  name=\"api_key\"\n                  value=${this._apiKey}\n                  @click=${this._handleCopyApiKey}\n                ></mwc-textfield>\n                <div class=\"api-key-banner\">Copied!</div>\n              </div>\n            `\n          : \"\"}\n\n        <mwc-button\n          slot=\"primaryAction\"\n          label=\"Install\"\n          @click=${this._handleInstall}\n        ></mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          no-attention\n          label=\"skip\"\n          @click=${() => {\n            this._state = \"skipped\";\n          }}\n        ></mwc-button>\n      `;\n    } else if (this._state === \"skipped\") {\n      heading = \"Installation skipped\";\n      content = html`\n        <div>\n          You will be able to install the configuration at a later point from\n          the three-dot menu on the device card.\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          no-attention\n          label=\"back\"\n          @click=${() => {\n            this._state = \"adopted\";\n          }}\n        ></mwc-button>\n      `;\n    }\n\n    return html`\n      <mwc-dialog .heading=${heading} @closed=${this._handleClose} open>\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this._needsWifiSecrets) {\n      checkHasWifiSecrets().then((hasWifiSecrets) => {\n        this._hasWifiSecrets = hasWifiSecrets;\n      });\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      changedProps.has(\"_state\") &&\n      this._state === \"ask\" &&\n      this.device.friendly_name\n    ) {\n      const nameEl = this._inputName;\n      nameEl.value = this.device.friendly_name;\n      nameEl.updateComplete.then(() => nameEl.focus());\n    }\n  }\n\n  private get _needsWifiSecrets() {\n    return this.device.network === \"wifi\";\n  }\n\n  private _cleanSSIDBlur = (ev: Event) => {\n    const input = ev.target as TextField;\n    // Remove starting and trailing whitespace\n    input.value = input.value.trim();\n  };\n\n  private _handleClose() {\n    this.parentNode!.removeChild(this);\n  }\n\n  private async _handleAdopt() {\n    this._error = undefined;\n\n    const hasFriendlyName = !!this.device.friendly_name;\n    const shouldStoreWifiSecrets =\n      this._needsWifiSecrets && this._hasWifiSecrets === false;\n\n    const friendlyNameValid =\n      !hasFriendlyName || this._inputName.reportValidity();\n    const ssidValid =\n      !shouldStoreWifiSecrets || this._inputSSID.reportValidity();\n\n    if (!friendlyNameValid) {\n      this._inputName.focus();\n      return;\n    } else if (!ssidValid) {\n      this._inputSSID.focus();\n      return;\n    }\n\n    if (shouldStoreWifiSecrets) {\n      this._busy = true;\n      try {\n        await storeWifiSecrets(\n          this._inputSSID.value,\n          this._inputPassword.value,\n        );\n      } catch (err) {\n        console.error(err);\n        this._busy = false;\n        this._error = \"Failed to store Wi-Fi credentials\";\n        return;\n      }\n    }\n\n    this._busy = true;\n    try {\n      let data = this.device;\n      if (hasFriendlyName) {\n        data = { ...data, friendly_name: this._inputName.value };\n        this._nameOverride = data.friendly_name!;\n      }\n      const response = await importDevice(data);\n      this._configFilename = response.configuration;\n      fireEvent(this, \"adopted\");\n      this._apiKey = await getConfigurationApiKey(this._configFilename);\n      this._state = \"adopted\";\n    } catch (err) {\n      this._busy = false;\n      this._error = \"Failed to import device\";\n    }\n  }\n\n  private async _handleInstall() {\n    openInstallServerDialog(this._configFilename, \"OTA\");\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private async _handleCopyApiKey() {\n    copyToClipboard(this._apiKey!);\n    this._inputApiKeyBanner!.style.setProperty(\"display\", \"flex\");\n    await sleep(3000);\n    // User might have closed the dialog in the meantime\n    this._inputApiKeyBanner?.style.setProperty(\"display\", \"none\");\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      :host {\n        --mdc-dialog-max-width: 390px;\n      }\n      .error {\n        color: var(--alert-error-color);\n        margin-bottom: 16px;\n      }\n      .api-key-container {\n        position: relative;\n      }\n      .api-key-banner {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: var(--mdc-theme-primary);\n        color: white;\n        display: none;\n        align-items: center;\n        justify-content: center;\n        margin: 0 !important;\n        font-weight: bold;\n        border-radius: 2px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-adopt-dialog\": ESPHomeAdoptDialog;\n  }\n}\n"],"names":["ESPHomeAdoptDialog","LitElement","constructor","this","_state","_busy","_apiKey","_cleanSSIDBlur","ev","input","target","value","trim","render","heading","content","html","device","friendly_name","name","_error","_needsWifiSecrets","_hasWifiSecrets","_handleAdopt","undefined","_nameOverride","_handleCopyApiKey","_handleInstall","_handleClose","firstUpdated","changedProps","super","checkHasWifiSecrets","then","hasWifiSecrets","updated","has","nameEl","_inputName","updateComplete","focus","network","parentNode","removeChild","hasFriendlyName","shouldStoreWifiSecrets","friendlyNameValid","reportValidity","ssidValid","_inputSSID","storeWifiSecrets","_inputPassword","err","console","error","data","response","importDevice","_configFilename","configuration","fireEvent","getConfigurationApiKey","openInstallServerDialog","shadowRoot","querySelector","close","copyToClipboard","_inputApiKeyBanner","style","setProperty","sleep","_a","styles","esphomeDialogStyles","css","__decorate","property","prototype","state","query","customElement"],"mappings":"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"}