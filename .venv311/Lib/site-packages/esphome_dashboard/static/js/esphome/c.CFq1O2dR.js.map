{"version":3,"file":"c.CFq1O2dR.js","sources":["../../../../src/util/name-validator.ts","../../../../src/rename-process/index.ts","../../../../src/rename/rename-dialog.ts"],"sourcesContent":["export const cleanName = (name: string) =>\n  name\n    // Convert uppercase to lower\n    .toLowerCase()\n    // Replace seperator characters with -\n    .replace(/[ \\._]/g, \"-\")\n    // Remove the rest\n    .replace(/[^a-z0-9-]/g, \"\");\n\nexport const stripDash = (name: string) =>\n  name.replace(/^-+/, \"\").replace(/-+$/, \"\");\n","export const preloadRenameProcessDialog = () =>\n  import(\"./rename-process-dialog\");\n\nexport const openRenameProcessDialog = (\n  configuration: string,\n  newName: string,\n) => {\n  preloadRenameProcessDialog();\n  const dialog = document.createElement(\"esphome-rename-process-dialog\");\n  dialog.configuration = configuration;\n  dialog.newName = newName;\n  document.body.append(dialog);\n};\n","import { LitElement, html, css, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport \"@material/mwc-button\";\nimport \"@material/mwc-textfield\";\nimport type { TextField } from \"@material/mwc-textfield\";\nimport \"@material/mwc-dialog\";\nimport { esphomeDialogStyles } from \"../styles\";\nimport { cleanName, stripDash } from \"../util/name-validator\";\nimport {\n  openRenameProcessDialog,\n  preloadRenameProcessDialog,\n} from \"../rename-process\";\n\n@customElement(\"esphome-rename-dialog\")\nclass ESPHomeRenameDialog extends LitElement {\n  @property() public configuration!: string;\n\n  public suggestedName!: string;\n\n  @state() private _error?: string;\n\n  @query(\"mwc-textfield[name=name]\") private _inputName!: TextField;\n\n  protected render() {\n    return html`\n      <mwc-dialog\n        open\n        heading=${`Rename ${this.configuration}`}\n        scrimClickAction\n        @closed=${this._handleClose}\n      >\n        ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n\n        <mwc-textfield\n          label=\"New Name\"\n          name=\"name\"\n          required\n          dialogInitialFocus\n          spellcheck=\"false\"\n          pattern=\"^[a-z0-9-]+$\"\n          helper=\"Lowercase letters (a-z), numbers (0-9) or dash (-)\"\n          @input=${this._cleanNameInput}\n          @blur=${this._cleanNameBlur}\n        ></mwc-textfield>\n\n        <mwc-button\n          no-attention\n          slot=\"secondaryAction\"\n          dialogAction=\"close\"\n          label=\"Close\"\n        ></mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          label=\"Rename\"\n          @click=${this._handleRename}\n        ></mwc-button>\n      </mwc-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    const input = this._inputName;\n    input.value = this.suggestedName;\n  }\n\n  private _cleanNameInput = (ev: InputEvent) => {\n    this._error = undefined;\n    const input = ev.target as TextField;\n    input.value = cleanName(input.value);\n  };\n\n  private _cleanNameBlur = (ev: Event) => {\n    const input = ev.target as TextField;\n    input.value = stripDash(input.value);\n  };\n\n  private async _handleRename(ev: Event) {\n    preloadRenameProcessDialog();\n\n    const nameInput = this._inputName;\n\n    const nameValid = nameInput.reportValidity();\n\n    if (!nameValid) {\n      nameInput.focus();\n      return;\n    }\n\n    const name = nameInput.value;\n\n    if (name !== this.suggestedName) {\n      openRenameProcessDialog(this.configuration, name);\n    }\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private _handleClose() {\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      .error {\n        color: var(--alert-error-color);\n        margin-bottom: 16px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-rename-dialog\": ESPHomeRenameDialog;\n  }\n}\n"],"names":["preloadRenameProcessDialog","import","ESPHomeRenameDialog","LitElement","constructor","this","_cleanNameInput","ev","_error","undefined","input","target","value","toLowerCase","replace","_cleanNameBlur","render","html","configuration","_handleClose","_handleRename","firstUpdated","changedProps","super","_inputName","suggestedName","nameInput","reportValidity","focus","name","newName","dialog","document","createElement","body","append","openRenameProcessDialog","shadowRoot","querySelector","close","parentNode","removeChild","styles","esphomeDialogStyles","css","__decorate","property","prototype","state","query","customElement"],"mappings":"wHAAO,MCAMA,EAA6B,IACxCC,OAAO,mBCaT,IAAMC,EAAN,cAAkCC,EAAlC,WAAAC,uBAoDUC,KAAAC,gBAAmBC,IACzBF,KAAKG,YAASC,EACd,MAAMC,EAAQH,EAAGI,OACjBD,EAAME,MAAkBF,EAAME,MFlE7BC,cAEAC,QAAQ,UAAW,KAEnBA,QAAQ,cAAe,GE8DY,EAG9BT,KAAAU,eAAkBR,IACxB,MAAMG,EAAQH,EAAGI,OACjBD,EAAME,MAAkBF,EAAME,MFhE3BE,QAAQ,MAAO,IAAIA,QAAQ,MAAO,GEgED,EAnD5B,MAAAE,GACR,OAAOC,CAAI;;;kBAGG,UAAUZ,KAAKa;;kBAEfb,KAAKc;;UAEbd,KAAKG,OAASS,CAAI,sBAAsBZ,KAAKG,eAAiB;;;;;;;;;;mBAUrDH,KAAKC;kBACND,KAAKU;;;;;;;;;;;;mBAYJV,KAAKe;;;MAMZ,YAAAC,CAAaC,GACrBC,MAAMF,aAAaC,GACLjB,KAAKmB,WACbZ,MAAQP,KAAKoB,cAcb,mBAAML,CAAcb,GAC1BP,IAEA,MAAM0B,EAAYrB,KAAKmB,WAIvB,IAFkBE,EAAUC,iBAI1B,YADAD,EAAUE,QAIZ,MAAMC,EAAOH,EAAUd,MAEnBiB,IAASxB,KAAKoB,eDxFiB,EACrCP,EACAY,KAEA9B,IACA,MAAM+B,EAASC,SAASC,cAAc,iCACtCF,EAAOb,cAAgBA,EACvBa,EAAOD,QAAUA,EACjBE,SAASE,KAAKC,OAAOJ,EAAO,ECiFxBK,CAAwB/B,KAAKa,cAAeW,GAE9CxB,KAAKgC,WAAYC,cAAc,cAAeC,QAGxC,YAAApB,GACNd,KAAKmC,WAAYC,YAAYpC,QAGxBH,EAAAwC,OAAS,CACdC,EACAC,CAAG;;;;;OAxFcC,EAAA,CAAlBC,KAAyC5C,EAAA6C,UAAA,qBAAA,GAIzBF,EAAA,CAAhBG,KAAgC9C,EAAA6C,UAAA,cAAA,GAEUF,EAAA,CAA1CI,EAAM,6BAA2D/C,EAAA6C,UAAA,kBAAA,GAP9D7C,EAAmB2C,EAAA,CADxBK,EAAc,0BACThD"}