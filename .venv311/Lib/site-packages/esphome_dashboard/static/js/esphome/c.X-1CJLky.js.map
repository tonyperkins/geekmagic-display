{"version":3,"file":"c.X-1CJLky.js","sources":["../../../../src/install-web/install-web-dialog.ts"],"sourcesContent":["import { LitElement, html, PropertyValues, css, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport \"@material/mwc-dialog\";\nimport \"@material/mwc-circular-progress\";\nimport \"@material/mwc-button\";\nimport type { ESPLoader } from \"esptool-js\";\nimport {\n  compileConfiguration,\n  Configuration,\n  getConfiguration,\n} from \"../api/configuration\";\nimport {\n  FileToFlash,\n  flashFiles,\n  getConfigurationFiles,\n} from \"../web-serial/flash\";\nimport { openCompileDialog } from \"../compile\";\nimport { openInstallWebDialog } from \".\";\nimport {\n  chipFamilyToPlatform,\n  SupportedPlatforms,\n  type ChipFamily,\n} from \"../const\";\nimport { esphomeDialogStyles } from \"../styles\";\nimport { sleep } from \"../util/sleep\";\n\nconst OK_ICON = \"ðŸŽ‰\";\nconst WARNING_ICON = \"ðŸ‘€\";\n\n@customElement(\"esphome-install-web-dialog\")\nexport class ESPHomeInstallWebDialog extends LitElement {\n  @property() public params!: {\n    // If a port was passed in, the port will not be closed when dialog closes\n    port?: SerialPort;\n    // Pass either a configuration or a filesCallback. filesCallback receives platform of ESP device.\n    configuration?: string;\n    filesCallback?: (platform: SupportedPlatforms) => Promise<FileToFlash[]>;\n    // Should the device be erased before installation\n    erase?: boolean;\n    // Callback when the dialog is closed. Note that if success is false,\n    // some other dialog might be opened when the dialog is closed.\n    onClose?: (success: boolean) => void;\n  };\n\n  @property() public esploader!: ESPLoader;\n\n  @state() private _writeProgress?: number;\n\n  @state() private _state:\n    | \"connecting_webserial\"\n    | \"prepare_installation\"\n    | \"installing\"\n    | \"done\" = \"connecting_webserial\";\n\n  @state() private _error?: string | TemplateResult;\n\n  private _platform?: SupportedPlatforms;\n\n  protected render() {\n    let heading;\n    let content;\n    let hideActions = false;\n\n    if (this._state === \"connecting_webserial\") {\n      content = this._renderProgress(\"Connecting\");\n      hideActions = true;\n    } else if (this._state === \"prepare_installation\") {\n      content = this._renderProgress(\"Preparing installation\");\n      hideActions = true;\n    } else if (this._state === \"installing\") {\n      content =\n        this._writeProgress === undefined\n          ? this._renderProgress(\"Erasing\")\n          : this._renderProgress(\n              html`\n                Installing<br /><br />\n                This will take\n                ${this._platform === \"ESP8266\" ? \"a minute\" : \"2 minutes\"}.<br />\n                Keep this page visible to prevent slow down\n              `,\n              // Show as undeterminate under 3% or else we don't show any pixels\n              this._writeProgress > 3 ? this._writeProgress : undefined,\n            );\n      hideActions = true;\n    } else if (this._state === \"done\") {\n      if (this._error) {\n        content = content = html`\n          ${this._renderMessage(WARNING_ICON, this._error, false)}\n          <mwc-button\n            slot=\"secondaryAction\"\n            dialogAction=\"ok\"\n            label=\"Close\"\n          ></mwc-button>\n          <mwc-button\n            slot=\"primaryAction\"\n            label=\"Retry\"\n            @click=${this._handleRetry}\n          ></mwc-button>\n        `;\n      } else {\n        content = this._renderMessage(\n          OK_ICON,\n          `Configuration installed!`,\n          true,\n        );\n      }\n    }\n\n    return html`\n      <mwc-dialog\n        open\n        heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n        .hideActions=${hideActions}\n      >\n        ${content}\n      </mwc-dialog>\n    `;\n  }\n\n  _renderProgress(label: string | TemplateResult, progress?: number) {\n    return html`\n      <div class=\"center\">\n        <div>\n          <mwc-circular-progress\n            active\n            ?indeterminate=${progress === undefined}\n            .progress=${progress !== undefined ? progress / 100 : undefined}\n            density=\"8\"\n          ></mwc-circular-progress>\n          ${progress !== undefined\n            ? html`<div class=\"progress-pct\">${progress}%</div>`\n            : \"\"}\n        </div>\n        ${label}\n      </div>\n    `;\n  }\n\n  _renderMessage(\n    icon: string,\n    label: string | TemplateResult,\n    showClose: boolean,\n  ) {\n    return html`\n      <div class=\"center\">\n        <div class=\"icon\">${icon}</div>\n        ${label}\n      </div>\n      ${showClose\n        ? html`\n            <mwc-button\n              slot=\"primaryAction\"\n              dialogAction=\"ok\"\n              label=\"Close\"\n            ></mwc-button>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._handleInstall();\n  }\n\n  private _openCompileDialog() {\n    openCompileDialog(this.params.configuration!, true);\n    this._close();\n  }\n\n  private _handleRetry() {\n    openInstallWebDialog(this.params, () => this._close());\n  }\n\n  private async _handleInstall() {\n    const esploader = this.esploader;\n    esploader.transport.device.addEventListener(\"disconnect\", async () => {\n      this._state = \"done\";\n      this._error = \"Device disconnected\";\n      if (!this.params.port) {\n        await esploader.transport.device.close();\n      }\n    });\n\n    try {\n      try {\n        await esploader.main();\n        await esploader.flashId();\n      } catch (err) {\n        console.error(err);\n        this._state = \"done\";\n        this._error =\n          \"Failed to initialize. Try resetting your device or holding the BOOT button while selecting your serial port until it starts preparing the installation.\";\n        return;\n      }\n\n      this._platform =\n        chipFamilyToPlatform[esploader.chip.CHIP_NAME as ChipFamily];\n\n      const filesCallback =\n        this.params.filesCallback ||\n        ((platform: SupportedPlatforms) =>\n          this._getFilesForConfiguration(this.params.configuration!, platform));\n\n      let files: FileToFlash[] | undefined = [];\n\n      try {\n        files = await filesCallback(this._platform!);\n      } catch (err) {\n        this._state = \"done\";\n        this._error = String(err);\n        return;\n      }\n\n      // If getFilesForConfiguration already did some error handling.\n      if (!files) {\n        return;\n      }\n\n      this._state = \"installing\";\n\n      try {\n        await flashFiles(\n          esploader,\n          files,\n          this.params.erase === true,\n          (pct) => {\n            this._writeProgress = pct;\n          },\n        );\n      } catch (err) {\n        // It is \"done\" if disconnected\n        // @ts-ignore\n        if (this._state !== \"done\") {\n          this._error = `Installation failed: ${err}`;\n          this._state = \"done\";\n        }\n        return;\n      }\n\n      await esploader.hardReset();\n      this._state = \"done\";\n    } finally {\n      console.log(\"Closing port\");\n      try {\n        await esploader.transport.disconnect();\n        // If a port was passed in, we open it again\n        if (this.params.port) {\n          console.log(\"Reopening port\");\n          await sleep(1000);\n          await this.params.port.open({\n            baudRate: esploader.transport.baudrate,\n            bufferSize: 8192,\n          });\n        }\n      } catch (err) {\n        // can happen if we already closed in disconnect\n      }\n    }\n  }\n\n  private async _getFilesForConfiguration(\n    configuration: string,\n    platform: SupportedPlatforms,\n  ): Promise<FileToFlash[] | undefined> {\n    let info: Configuration;\n\n    try {\n      info = await getConfiguration(configuration);\n    } catch (err) {\n      this._state = \"done\";\n      this._error = \"Error fetching configuration information\";\n      return;\n    }\n\n    if (platform !== info.esp_platform.toUpperCase()) {\n      this._state = \"done\";\n      this._error = `Configuration does not match the platform of the connected device. Expected an ${info.esp_platform.toUpperCase()} device.`;\n      return;\n    }\n\n    this._state = \"prepare_installation\";\n\n    try {\n      await compileConfiguration(configuration);\n    } catch (err) {\n      this._error = html`\n        Failed to prepare configuration<br /><br />\n        <button class=\"link\" @click=${this._openCompileDialog}>\n          See what went wrong.\n        </button>\n      `;\n      this._state = \"done\";\n      return;\n    }\n\n    // It is \"done\" if disconnected while compiling\n    // @ts-ignore\n    if (this._state === \"done\") {\n      return;\n    }\n\n    return await getConfigurationFiles(configuration);\n  }\n\n  private _close() {\n    this.shadowRoot!.querySelector(\"mwc-dialog\")!.close();\n  }\n\n  private async _handleClose() {\n    if (this.params.onClose) {\n      this.params.onClose(this._state === \"done\" && this._error === undefined);\n    }\n    this.parentNode!.removeChild(this);\n  }\n\n  static styles = [\n    esphomeDialogStyles,\n    css`\n      mwc-list-item {\n        margin: 0 -20px;\n      }\n      svg {\n        fill: currentColor;\n      }\n      .center {\n        text-align: center;\n      }\n      mwc-circular-progress {\n        margin-bottom: 16px;\n      }\n      .progress-pct {\n        position: absolute;\n        top: 50px;\n        left: 0;\n        right: 0;\n      }\n      .icon {\n        font-size: 50px;\n        line-height: 80px;\n        color: black;\n      }\n      .show-ports {\n        margin-top: 16px;\n      }\n      .error {\n        padding: 8px 24px;\n        background-color: #fff59d;\n        margin: 0 -24px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"esphome-install-web-dialog\": ESPHomeInstallWebDialog;\n  }\n}\n"],"names":["ESPHomeInstallWebDialog","LitElement","constructor","this","_state","render","content","hideActions","_renderProgress","undefined","_writeProgress","html","_platform","_error","_renderMessage","_handleRetry","heading","_handleClose","label","progress","icon","showClose","firstUpdated","changedProps","super","_handleInstall","_openCompileDialog","openCompileDialog","params","configuration","_close","openInstallWebDialog","esploader","transport","device","addEventListener","async","port","close","main","flashId","err","console","error","chipFamilyToPlatform","chip","CHIP_NAME","filesCallback","platform","_getFilesForConfiguration","files","String","flashFiles","erase","pct","hardReset","log","disconnect","sleep","open","baudRate","baudrate","bufferSize","info","getConfiguration","esp_platform","toUpperCase","compileConfiguration","getConfigurationFiles","shadowRoot","querySelector","onClose","parentNode","removeChild","styles","esphomeDialogStyles","css","__decorate","property","prototype","state","customElement"],"mappings":"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"}