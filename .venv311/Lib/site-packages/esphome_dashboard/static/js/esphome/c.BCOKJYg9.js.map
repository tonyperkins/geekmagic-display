{"version":3,"file":"c.BCOKJYg9.js","sources":["../../../../node_modules/esptool-js/lib/targets/esp32c2.js"],"sourcesContent":["import { ESP32C3ROM } from \"./esp32c3.js\";\nexport class ESP32C2ROM extends ESP32C3ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C2\";\n        this.IMAGE_CHIP_ID = 12;\n        this.EFUSE_BASE = 0x60008800;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x040;\n        this.UART_CLKDIV_REG = 0x60000014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x6000007c;\n        this.XTAL_CLK_DIVIDER = 1;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x60002000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n    }\n    async getPkgVersion(loader) {\n        const numWord = 1;\n        const block1Addr = this.EFUSE_BASE + 0x040;\n        const addr = block1Addr + 4 * numWord;\n        const word3 = await loader.readReg(addr);\n        const pkgVersion = (word3 >> 22) & 0x07;\n        return pkgVersion;\n    }\n    async getChipRevision(loader) {\n        const block1Addr = this.EFUSE_BASE + 0x040;\n        const numWord = 1;\n        const pos = 20;\n        const addr = block1Addr + 4 * numWord;\n        const ret = ((await loader.readReg(addr)) & (0x03 << pos)) >> pos;\n        return ret;\n    }\n    async getChipDescription(loader) {\n        let desc;\n        const pkgVer = await this.getPkgVersion(loader);\n        if (pkgVer === 0 || pkgVer === 1) {\n            desc = \"ESP32-C2\";\n        }\n        else {\n            desc = \"unknown ESP32-C2\";\n        }\n        const chip_rev = await this.getChipRevision(loader);\n        desc += \" (revision \" + chip_rev + \")\";\n        return desc;\n    }\n    async getChipFeatures(loader) {\n        return [\"Wi-Fi\", \"BLE\"];\n    }\n    async getCrystalFreq(loader) {\n        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let normXtal;\n        if (etsXtal > 33) {\n            normXtal = 40;\n        }\n        else {\n            normXtal = 26;\n        }\n        if (Math.abs(normXtal - etsXtal) > 1) {\n            loader.info(\"WARNING: Unsupported crystal in use\");\n        }\n        return normXtal;\n    }\n    async changeBaudRate(loader) {\n        const rom_with_26M_XTAL = await this.getCrystalFreq(loader);\n        if (rom_with_26M_XTAL === 26) {\n            loader.changeBaud();\n        }\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32C2ROM","ESP32C3ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","MAC_EFUSE_REG","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","XTAL_CLK_DIVIDER","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","getPkgVersion","loader","addr","readReg","getChipRevision","getChipDescription","desc","pkgVer","getChipFeatures","getCrystalFreq","uartDiv","etsXtal","transport","baudrate","normXtal","Math","abs","info","changeBaudRate","changeBaud","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","getEraseSize","offset","size"],"mappings":"qEACO,MAAMA,UAAmBC,EAC5B,WAAAC,GACIC,SAASC,WACTC,KAAKC,UAAY,WACjBD,KAAKE,cAAgB,GACrBF,KAAKG,WAAa,WAClBH,KAAKI,cAAgBJ,KAAKG,WAAa,GACvCH,KAAKK,gBAAkB,WACvBL,KAAKM,iBAAmB,QACxBN,KAAKO,mBAAqB,WAC1BP,KAAKQ,iBAAmB,EACxBR,KAAKS,iBAAmB,KACxBT,KAAKU,wBAA0B,EAC/BV,KAAKW,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZX,KAAKY,aAAe,WACpBZ,KAAKa,aAAe,GACpBb,KAAKc,cAAgB,GACrBd,KAAKe,cAAgB,GACrBf,KAAKgB,mBAAqB,GAC1BhB,KAAKiB,mBAAqB,GAC1BjB,KAAKkB,YAAc,EAC3B,CACI,mBAAMC,CAAcC,GAChB,MAEMC,EADarB,KAAKG,WAAa,GACX,EAG1B,aAFoBiB,EAAOE,QAAQD,IACN,GAAM,CAE3C,CACI,qBAAME,CAAgBH,GAClB,MAGMC,EAHarB,KAAKG,WAAa,GAGX,EAE1B,aADoBiB,EAAOE,QAAQD,GAAU,GAFjC,OAIpB,CACI,wBAAMG,CAAmBJ,GACrB,IAAIK,EACJ,MAAMC,QAAe1B,KAAKmB,cAAcC,GAEpCK,EADW,IAAXC,GAA2B,IAAXA,EACT,WAGA,mBAIX,OADAD,GAAQ,oBADezB,KAAKuB,gBAAgBH,GACT,IAC5BK,CACf,CACI,qBAAME,CAAgBP,GAClB,MAAO,CAAC,QAAS,MACzB,CACI,oBAAMQ,CAAeR,GACjB,MAAMS,QAAiBT,EAAOE,QAAQtB,KAAKK,iBAAoBL,KAAKM,iBAC9DwB,EAAWV,EAAOW,UAAUC,SAAWH,EAAW,IAAU7B,KAAKQ,iBACvE,IAAIyB,EAUJ,OARIA,EADAH,EAAU,GACC,GAGA,GAEXI,KAAKC,IAAIF,EAAWH,GAAW,GAC/BV,EAAOgB,KAAK,uCAETH,CACf,CACI,oBAAMI,CAAejB,GAES,WADMpB,KAAK4B,eAAeR,IAEhDA,EAAOkB,YAEnB,CACI,IAAAC,CAAKC,GACD,MAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CAC1C,CACI,aAAMG,CAAQxB,GACV,IAAIyB,QAAazB,EAAOE,QAAQtB,KAAKI,eACrCyC,KAAgB,EAChB,IAAIC,QAAa1B,EAAOE,QAAQtB,KAAKI,cAAgB,GACrD0C,EAAQA,IAAS,EAAK,MACtB,MAAMC,EAAM,IAAIC,WAAW,GAO3B,OANAD,EAAI,GAAMD,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EACD7C,KAAKuC,KAAKQ,EAAI,IAClB,IACA/C,KAAKuC,KAAKQ,EAAI,IACd,IACA/C,KAAKuC,KAAKQ,EAAI,IACd,IACA/C,KAAKuC,KAAKQ,EAAI,IACd,IACA/C,KAAKuC,KAAKQ,EAAI,IACd,IACA/C,KAAKuC,KAAKQ,EAAI,GAC1B,CACI,YAAAE,CAAaC,EAAQC,GACjB,OAAOA,CACf","x_google_ignoreList":[0]}