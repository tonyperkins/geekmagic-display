Metadata-Version: 2.4
Name: esp-idf-size
Version: 1.7.1
Summary: Firmware size analysis for ESP-IDF
Home-page: https://github.com/espressif/esp-idf-size
Author: Espressif Systems
Author-email: 
Keywords: espressif,embedded,project,size
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Environment :: Console
Classifier: Topic :: Software Development :: Embedded Systems
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS :: MacOS X
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyyaml
Requires-Dist: rich
Provides-Extra: dev
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: jsonschema; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: commitizen; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# esp-idf-size

In the field of IoT development, memory constraints are a common challenge,
often requiring developers to optimize their application size. Whether it
involves ensuring the firmware fits within available flash memory or analyzing
impact of code changes on the final  binary size, effective firmware size
management is essential for resource efficiency.  The esp-idf-size tool
provides developers with the means to explore statically allocated RAM used by
the final binary firmware image generated by
[ESP-IDF](https://github.com/espressif/esp-idf) SDK for Espressif devices.

The `esp-idf-size` tool is included in the ESP-IDF and is installed
automatically. It can be accessed using the `idf.py` command or the
`idf_size.py` wrapper. The `idf.py` command provides access to the most
commonly used `esp-idf-size` commands and automatically sets some options for
user convenience, while the `idf_size.py` wrapper allows full access to all
`esp-idf-size` features. For more information on using `esp-idf-size` in
ESP-IDF, please refer to
[Minimizing Binary Size](https://docs.espressif.com/projects/esp-idf/en/stable/api-guides/performance/size.html).


The `esp-idf-size` package comes in two versions: legacy and refactored. The
refactored version, which is the default version used in ESP_IDF v5.3 and
later, retains backward compatibility with the options, making it easy to
switch between the two by setting the `ESP_IDF_SIZE_NG` environment variable,
available from ESP-IDF v5.0 onwards. However, the size report output
formats are different in the refactored version. You can also use the
refactored version by specifying the `--ng` option or by directly using the
`esp_idf_size.ng` subpackage. Here are some examples of how to use the
refactored version:

```sh
python -m esp_idf_size --ng --help
python -m esp_idf_size.ng --help
export ESP_IDF_SIZE_NG=1
python -m esp_idf_size --help
```

For more detailed information about the refactored version, please refer to the
documentation available [here](esp_idf_size/ng/docs/readme.md).
